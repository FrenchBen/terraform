{
    "version": 3,
    "terraform_version": "0.10.3",
    "serial": 3,
    "lineage": "2fae5aa7-ecd4-4dab-a538-895dc8a78502",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.aws-cloudformation": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "9070b177d0197b33aaf2fc398c2d4f4881a93ec8916b9f93c382839e0967de49",
                        "attributes": {
                            "id": "9070b177d0197b33aaf2fc398c2d4f4881a93ec8916b9f93c382839e0967de49",
                            "rendered": "{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Conditions\": {\n        \"CloudStorEfsSelected\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"EnableCloudStorEfs\"\n                },\n                \"yes\"\n            ]\n        },\n        \"CreateLogResources\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"EnableCloudWatchLogs\"\n                },\n                \"yes\"\n            ]\n        },\n        \"EBSOptimized\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"EnableEbsOptimized\"\n                },\n                \"yes\"\n            ]\n        },\n        \"EFSSupported\": {\n            \"Fn::Equals\": [\n                {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegion2AZ\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"EFSSupport\"\n                    ]\n                },\n                \"yes\"\n            ]\n        },\n        \"HasOnly2AZs\": {\n            \"Fn::Equals\": [\n                {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegion2AZ\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"NumAZs\"\n                    ]\n                },\n                \"2\"\n            ]\n        },\n        \"InstallCloudStorEFSPreReqs\": {\n            \"Fn::And\": [\n                {\n                    \"Condition\": \"EFSSupported\"\n                },\n                {\n                    \"Condition\": \"CloudStorEfsSelected\"\n                }\n            ]\n        },\n        \"LambdaSupported\": {\n            \"Fn::Equals\": [\n                {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegion2AZ\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"LambdaSupport\"\n                    ]\n                },\n                \"yes\"\n            ]\n        }\n    },\n    \"Description\": \"Docker CE for AWS 17.09.0-ce-rc2 (17.09.0-ce-rc2-aws1)\",\n    \"Mappings\": {\n        \"AWSInstanceType2Arch\": {\n            \"c3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"cc2.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"cr1.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"g2.2xlarge\": {\n                \"Arch\": \"HVMG2\"\n            },\n            \"hi1.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"hs1.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.16xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.medium\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.10xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.16xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.16xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.medium\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.micro\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.small\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.xlarge\": {\n                \"Arch\": \"HVM64\"\n            }\n        },\n        \"AWSRegion2AZ\": {\n            \"ap-northeast-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Tokyo\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-northeast-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Seoul\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-south-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Mumbai\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-southeast-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Singapore\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-southeast-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Sydney\",\n                \"NumAZs\": \"3\"\n            },\n            \"ca-central-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"no\",\n                \"Name\": \"Central\",\n                \"NumAZs\": \"2\"\n            },\n            \"eu-central-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Frankfurt\",\n                \"NumAZs\": \"2\"\n            },\n            \"eu-west-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Ireland\",\n                \"NumAZs\": \"3\"\n            },\n            \"eu-west-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"London\",\n                \"NumAZs\": \"2\"\n            },\n            \"sa-east-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"no\",\n                \"Name\": \"Sao Paulo\",\n                \"NumAZs\": \"2\"\n            },\n            \"us-east-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"N. Virgina\",\n                \"NumAZs\": \"4\"\n            },\n            \"us-east-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Ohio\",\n                \"NumAZs\": \"3\"\n            },\n            \"us-gov-west-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"no\",\n                \"Name\": \"GovCloud\",\n                \"NumAZs\": \"2\"\n            },\n            \"us-west-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"N. California\",\n                \"NumAZs\": \"2\"\n            },\n            \"us-west-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Oregon\",\n                \"NumAZs\": \"3\"\n            }\n        },\n        \"AWSRegionArch2AMI\": {\n            \"ap-northeast-1\": {\n                \"HVM64\": \"ami-cc7ebcaa\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-northeast-2\": {\n                \"HVM64\": \"ami-0404df6a\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-south-1\": {\n                \"HVM64\": \"ami-d6f0b7b9\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-southeast-1\": {\n                \"HVM64\": \"ami-61651002\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-southeast-2\": {\n                \"HVM64\": \"ami-b53ed9d7\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ca-central-1\": {\n                \"HVM64\": \"ami-76ce7712\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"eu-central-1\": {\n                \"HVM64\": \"ami-3bf14754\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"eu-west-1\": {\n                \"HVM64\": \"ami-0f25e676\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"eu-west-2\": {\n                \"HVM64\": \"ami-691d0e0d\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"sa-east-1\": {\n                \"HVM64\": \"ami-94364bf8\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-east-1\": {\n                \"HVM64\": \"ami-8a7b9cf0\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-east-2\": {\n                \"HVM64\": \"ami-5fe6c43a\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-west-1\": {\n                \"HVM64\": \"ami-19497f79\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-west-2\": {\n                \"HVM64\": \"ami-39817241\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            }\n        },\n        \"DockerForAWS\": {\n            \"version\": {\n                \"HasDDC\": \"no\",\n                \"addOn\": \"base\",\n                \"channel\": \"test\",\n                \"docker\": \"17.09.0-ce-rc2\",\n                \"forAws\": \"17.09.0-ce-rc2-aws1\"\n            }\n        },\n        \"VpcCidrs\": {\n            \"pubsubnet1\": {\n                \"cidr\": \"172.31.0.0/20\"\n            },\n            \"pubsubnet2\": {\n                \"cidr\": \"172.31.16.0/20\"\n            },\n            \"pubsubnet3\": {\n                \"cidr\": \"172.31.32.0/20\"\n            },\n            \"pubsubnet4\": {\n                \"cidr\": \"172.31.48.0/20\"\n            },\n            \"vpc\": {\n                \"cidr\": \"172.31.0.0/16\"\n            }\n        }\n    },\n    \"Metadata\": {\n        \"AWS::CloudFormation::Interface\": {\n            \"ParameterGroups\": [\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Size\"\n                    },\n                    \"Parameters\": [\n                        \"ManagerSize\",\n                        \"ClusterSize\"\n                    ]\n                },\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Properties\"\n                    },\n                    \"Parameters\": [\n                        \"KeyName\",\n                        \"EnableSystemPrune\",\n                        \"EnableCloudWatchLogs\",\n                        \"EnableCloudStorEfs\"\n                    ]\n                },\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Manager Properties\"\n                    },\n                    \"Parameters\": [\n                        \"ManagerInstanceType\",\n                        \"ManagerDiskSize\",\n                        \"ManagerDiskType\"\n                    ]\n                },\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Worker Properties\"\n                    },\n                    \"Parameters\": [\n                        \"InstanceType\",\n                        \"WorkerDiskSize\",\n                        \"WorkerDiskType\"\n                    ]\n                }\n            ],\n            \"ParameterLabels\": {\n                \"ClusterSize\": {\n                    \"default\": \"Number of Swarm worker nodes?\"\n                },\n                \"EnableCloudStorEfs\": {\n                    \"default\": \"Create EFS prerequsities for CloudStor?\"\n                },\n                \"EnableCloudWatchLogs\": {\n                    \"default\": \"Use Cloudwatch for container logging?\"\n                },\n                \"EnableEbsOptimized\": {\n                    \"default\": \"Enable EBS I/O optimization?\"\n                },\n                \"EnableSystemPrune\": {\n                    \"default\": \"Enable daily resource cleanup?\"\n                },\n                \"InstanceType\": {\n                    \"default\": \"Agent worker instance type?\"\n                },\n                \"KeyName\": {\n                    \"default\": \"Which SSH key to use?\"\n                },\n                \"ManagerDiskSize\": {\n                    \"default\": \"Manager ephemeral storage volume size?\"\n                },\n                \"ManagerDiskType\": {\n                    \"default\": \"Manager ephemeral storage volume type\"\n                },\n                \"ManagerInstanceType\": {\n                    \"default\": \"Swarm manager instance type?\"\n                },\n                \"ManagerSize\": {\n                    \"default\": \"Number of Swarm managers?\"\n                },\n                \"WorkerDiskSize\": {\n                    \"default\": \"Worker ephemeral storage volume size?\"\n                },\n                \"WorkerDiskType\": {\n                    \"default\": \"Worker ephemeral storage volume type\"\n                }\n            }\n        }\n    },\n    \"Outputs\": {\n        \"DefaultDNSTarget\": {\n            \"Description\": \"Use this name to update your DNS records\",\n            \"Value\": {\n                \"Fn::GetAtt\": [\n                    \"ExternalLoadBalancer\",\n                    \"DNSName\"\n                ]\n            }\n        },\n        \"ELBDNSZoneID\": {\n            \"Description\": \"Use this zone ID to update your DNS records\",\n            \"Value\": {\n                \"Fn::GetAtt\": [\n                    \"ExternalLoadBalancer\",\n                    \"CanonicalHostedZoneNameID\"\n                ]\n            }\n        },\n        \"ManagerSecurityGroupID\": {\n            \"Description\": \"SecurityGroup ID of ManagerVpcSG\",\n            \"Value\": {\n                \"Ref\": \"ManagerVpcSG\"\n            }\n        },\n        \"Managers\": {\n            \"Description\": \"You can see the manager nodes associated with this cluster here. Follow the instructions here: https://docs.docker.com/docker-for-aws/deploy/\",\n            \"Value\": {\n                \"Fn::Join\": [\n                    \"\",\n                    [\n                        \"https://\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \".console.aws.amazon.com/ec2/v2/home?region=\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"#Instances:tag:aws:autoscaling:groupName=\",\n                        {\n                            \"Ref\": \"ManagerAsg\"\n                        },\n                        \";sort=desc:dnsName\"\n                    ]\n                ]\n            }\n        },\n        \"NodeSecurityGroupID\": {\n            \"Description\": \"SecurityGroup ID of NodeVpcSG\",\n            \"Value\": {\n                \"Ref\": \"NodeVpcSG\"\n            }\n        },\n        \"SwarmWideSecurityGroupID\": {\n            \"Description\": \"SecurityGroup ID of SwarmWideSG\",\n            \"Value\": {\n                \"Ref\": \"SwarmWideSG\"\n            }\n        },\n        \"VPCID\": {\n            \"Description\": \"Use this as the VPC for configuring Private Hosted Zones\",\n            \"Value\": {\n                \"Ref\": \"Vpc\"\n            }\n        },\n        \"ZoneAvailabilityComment\": {\n            \"Description\": \"Availabilty Zones Comment\",\n            \"Value\": {\n                \"Fn::If\": [\n                    \"HasOnly2AZs\",\n                    \"This region only has 2 Availabiliy Zones (AZ). If one of those AZs goes away, it will cause problems for your Swarm Managers. Please use a Region with at least 3 AZs.\",\n                    \"This region has at least 3 Availability Zones (AZ). This is ideal to ensure a fully functional Swarm in case you lose an AZ.\"\n                ]\n            }\n        }\n    },\n    \"Parameters\": {\n        \"ClusterSize\": {\n            \"Default\": \"5\",\n            \"Description\": \"Number of worker nodes in the Swarm (0-1000).\",\n            \"MaxValue\": \"1000\",\n            \"MinValue\": \"0\",\n            \"Type\": \"Number\"\n        },\n        \"EnableCloudStorEfs\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"no\",\n            \"Description\": \"Create CloudStor EFS mount targets\",\n            \"Type\": \"String\"\n        },\n        \"EnableCloudWatchLogs\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"yes\",\n            \"Description\": \"Send all Container logs to CloudWatch\",\n            \"Type\": \"String\"\n        },\n        \"EnableEbsOptimized\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"no\",\n            \"Description\": \"Specifies whether the launch configuration is optimized for EBS I/O\",\n            \"Type\": \"String\"\n        },\n        \"EnableSystemPrune\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"no\",\n            \"Description\": \"Cleans up unused images, containers, networks and volumes\",\n            \"Type\": \"String\"\n        },\n        \"InstanceType\": {\n            \"AllowedValues\": [\n                \"t2.micro\",\n                \"t2.small\",\n                \"t2.medium\",\n                \"t2.large\",\n                \"t2.xlarge\",\n                \"t2.2xlarge\",\n                \"m4.large\",\n                \"m4.xlarge\",\n                \"m4.2xlarge\",\n                \"m4.4xlarge\",\n                \"m4.10xlarge\",\n                \"m4.16xlarge\",\n                \"m3.medium\",\n                \"m3.large\",\n                \"m3.xlarge\",\n                \"m3.2xlarge\",\n                \"c4.large\",\n                \"c4.xlarge\",\n                \"c4.2xlarge\",\n                \"c4.4xlarge\",\n                \"c4.8xlarge\",\n                \"c3.large\",\n                \"c3.xlarge\",\n                \"c3.2xlarge\",\n                \"c3.4xlarge\",\n                \"c3.8xlarge\",\n                \"r3.large\",\n                \"r3.xlarge\",\n                \"r3.2xlarge\",\n                \"r3.4xlarge\",\n                \"r3.8xlarge\",\n                \"r4.large\",\n                \"r4.xlarge\",\n                \"r4.2xlarge\",\n                \"r4.4xlarge\",\n                \"r4.8xlarge\",\n                \"r4.16xlarge\",\n                \"i3.large\",\n                \"i3.xlarge\",\n                \"i3.2xlarge\",\n                \"i3.4xlarge\",\n                \"i3.8xlarge\",\n                \"i3.16xlarge\"\n            ],\n            \"ConstraintDescription\": \"Must be a valid EC2 HVM instance type.\",\n            \"Default\": \"t2.micro\",\n            \"Description\": \"EC2 HVM instance type (t2.micro, m3.medium, etc).\",\n            \"Type\": \"String\"\n        },\n        \"KeyName\": {\n            \"ConstraintDescription\": \"Must be the name of an existing EC2 KeyPair\",\n            \"Description\": \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n            \"Type\": \"AWS::EC2::KeyPair::KeyName\"\n        },\n        \"ManagerDiskSize\": {\n            \"Default\": \"20\",\n            \"Description\": \"Size of Manager's ephemeral storage volume in GiB\",\n            \"MaxValue\": \"1024\",\n            \"MinValue\": \"20\",\n            \"Type\": \"Number\"\n        },\n        \"ManagerDiskType\": {\n            \"AllowedValues\": [\n                \"standard\",\n                \"gp2\"\n            ],\n            \"Default\": \"standard\",\n            \"Description\": \"Manager ephemeral storage volume type\",\n            \"Type\": \"String\"\n        },\n        \"ManagerInstanceType\": {\n            \"AllowedValues\": [\n                \"t2.micro\",\n                \"t2.small\",\n                \"t2.medium\",\n                \"t2.large\",\n                \"t2.xlarge\",\n                \"t2.2xlarge\",\n                \"m4.large\",\n                \"m4.xlarge\",\n                \"m4.2xlarge\",\n                \"m4.4xlarge\",\n                \"m4.10xlarge\",\n                \"m4.16xlarge\",\n                \"m3.medium\",\n                \"m3.large\",\n                \"m3.xlarge\",\n                \"m3.2xlarge\",\n                \"c4.large\",\n                \"c4.xlarge\",\n                \"c4.2xlarge\",\n                \"c4.4xlarge\",\n                \"c4.8xlarge\",\n                \"c3.large\",\n                \"c3.xlarge\",\n                \"c3.2xlarge\",\n                \"c3.4xlarge\",\n                \"c3.8xlarge\",\n                \"r3.large\",\n                \"r3.xlarge\",\n                \"r3.2xlarge\",\n                \"r3.4xlarge\",\n                \"r3.8xlarge\",\n                \"r4.large\",\n                \"r4.xlarge\",\n                \"r4.2xlarge\",\n                \"r4.4xlarge\",\n                \"r4.8xlarge\",\n                \"r4.16xlarge\",\n                \"i3.large\",\n                \"i3.xlarge\",\n                \"i3.2xlarge\",\n                \"i3.4xlarge\",\n                \"i3.8xlarge\",\n                \"i3.16xlarge\"\n            ],\n            \"ConstraintDescription\": \"Must be a valid EC2 HVM instance type.\",\n            \"Default\": \"t2.micro\",\n            \"Description\": \"EC2 HVM instance type (t2.micro, m3.medium, etc).\",\n            \"Type\": \"String\"\n        },\n        \"ManagerSize\": {\n            \"AllowedValues\": [\n                \"1\",\n                \"3\",\n                \"5\"\n            ],\n            \"Default\": \"3\",\n            \"Description\": \"Number of Swarm manager nodes (1, 3, 5)\",\n            \"Type\": \"Number\"\n        },\n        \"WorkerDiskSize\": {\n            \"Default\": \"20\",\n            \"Description\": \"Size of Workers's ephemeral storage volume in GiB\",\n            \"MaxValue\": \"1024\",\n            \"MinValue\": \"20\",\n            \"Type\": \"Number\"\n        },\n        \"WorkerDiskType\": {\n            \"AllowedValues\": [\n                \"standard\",\n                \"gp2\"\n            ],\n            \"Default\": \"standard\",\n            \"Description\": \"Worker ephemeral storage volume type\",\n            \"Type\": \"String\"\n        }\n    },\n    \"Resources\": {\n        \"AZInfo\": {\n            \"Condition\": \"LambdaSupported\",\n            \"Properties\": {\n                \"Region\": {\n                    \"Ref\": \"AWS::Region\"\n                },\n                \"ServiceToken\": {\n                    \"Fn::GetAtt\": [\n                        \"AZInfoFunction\",\n                        \"Arn\"\n                    ]\n                }\n            },\n            \"Type\": \"Custom::AZInfo\"\n        },\n        \"AZInfoFunction\": {\n            \"Condition\": \"LambdaSupported\",\n            \"Properties\": {\n                \"Code\": {\n                    \"ZipFile\": {\n                        \"Fn::Join\": [\n                            \"\\n\",\n                            [\n                                \"import cfnresponse\",\n                                \"import boto3\",\n                                \"def handler(event, context):\",\n                                \"    ec2c = boto3.client('ec2')\",\n                                \"    r = ec2c.describe_availability_zones()\",\n                                \"    azs = r.get('AvailabilityZones')\",\n                                \"    az_list = [az.get('ZoneName') for az in azs if az.get('State') == 'available']\",\n                                \"    az0 = az_list[0]\",\n                                \"    az1 = az_list[1]\",\n                                \"    if len(az_list) \u003e 2:\",\n                                \"        az2 = az_list[2]\",\n                                \"    else:\",\n                                \"        az2 = az0\",\n                                \"    resp = {'AZ0': az0, 'AZ1': az1, 'AZ2': az2}\",\n                                \"    cfnresponse.send(event, context, cfnresponse.SUCCESS, resp)\",\n                                \"    return resp\"\n                            ]\n                        ]\n                    }\n                },\n                \"Handler\": \"index.handler\",\n                \"MemorySize\": 128,\n                \"Role\": {\n                    \"Fn::GetAtt\": [\n                        \"LambdaExecutionRole\",\n                        \"Arn\"\n                    ]\n                },\n                \"Runtime\": \"python2.7\",\n                \"Timeout\": \"10\"\n            },\n            \"Type\": \"AWS::Lambda::Function\"\n        },\n        \"AttachGateway\": {\n            \"DependsOn\": [\n                \"Vpc\",\n                \"InternetGateway\"\n            ],\n            \"Properties\": {\n                \"InternetGatewayId\": {\n                    \"Ref\": \"InternetGateway\"\n                },\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::VPCGatewayAttachment\"\n        },\n        \"CloudstorEBSPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"ec2:CreateTags\",\n                                \"ec2:AttachVolume\",\n                                \"ec2:DetachVolume\",\n                                \"ec2:CreateVolume\",\n                                \"ec2:DeleteVolume\",\n                                \"ec2:DescribeVolumes\",\n                                \"ec2:DescribeVolumeStatus\",\n                                \"ec2:CreateSnapshot\",\n                                \"ec2:DeleteSnapshot\",\n                                \"ec2:DescribeSnapshots\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"cloudstor-ebs-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"DockerLogGroup\": {\n            \"Condition\": \"CreateLogResources\",\n            \"Properties\": {\n                \"LogGroupName\": {\n                    \"Fn::Join\": [\n                        \"-\",\n                        [\n                            {\n                                \"Ref\": \"AWS::StackName\"\n                            },\n                            \"lg\"\n                        ]\n                    ]\n                },\n                \"RetentionInDays\": 7\n            },\n            \"Type\": \"AWS::Logs::LogGroup\"\n        },\n        \"DynDBPolicies\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"SwarmDynDBTable\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"dynamodb:PutItem\",\n                                \"dynamodb:DeleteItem\",\n                                \"dynamodb:GetItem\",\n                                \"dynamodb:UpdateItem\",\n                                \"dynamodb:Query\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::Join\": [\n                                    \"\",\n                                    [\n                                        \"arn:aws:dynamodb:\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \":\",\n                                        {\n                                            \"Ref\": \"AWS::AccountId\"\n                                        },\n                                        \":table/\",\n                                        {\n                                            \"Ref\": \"SwarmDynDBTable\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"dyndb-getput\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"DynDBWorkerPolicies\": {\n            \"DependsOn\": [\n                \"WorkerRole\",\n                \"SwarmDynDBTable\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"dynamodb:GetItem\",\n                                \"dynamodb:Query\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::Join\": [\n                                    \"\",\n                                    [\n                                        \"arn:aws:dynamodb:\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \":\",\n                                        {\n                                            \"Ref\": \"AWS::AccountId\"\n                                        },\n                                        \":table/\",\n                                        {\n                                            \"Ref\": \"SwarmDynDBTable\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"worker-dyndb-get\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"ExternalLoadBalancer\": {\n            \"DependsOn\": [\n                \"AttachGateway\",\n                \"ExternalLoadBalancerSG\",\n                \"PubSubnetAz1\",\n                \"PubSubnetAz2\",\n                \"PubSubnetAz3\"\n            ],\n            \"Properties\": {\n                \"ConnectionSettings\": {\n                    \"IdleTimeout\": 600\n                },\n                \"CrossZone\": \"true\",\n                \"HealthCheck\": {\n                    \"HealthyThreshold\": \"2\",\n                    \"Interval\": \"10\",\n                    \"Target\": \"HTTP:44554/\",\n                    \"Timeout\": \"8\",\n                    \"UnhealthyThreshold\": \"4\"\n                },\n                \"Listeners\": [\n                    {\n                        \"InstancePort\": \"7\",\n                        \"LoadBalancerPort\": \"7\",\n                        \"Protocol\": \"TCP\"\n                    }\n                ],\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"ExternalLoadBalancerSG\"\n                    }\n                ],\n                \"Subnets\": {\n                    \"Fn::If\": [\n                        \"HasOnly2AZs\",\n                        [\n                            {\n                                \"Ref\": \"PubSubnetAz1\"\n                            },\n                            {\n                                \"Ref\": \"PubSubnetAz2\"\n                            }\n                        ],\n                        [\n                            {\n                                \"Ref\": \"PubSubnetAz1\"\n                            },\n                            {\n                                \"Ref\": \"PubSubnetAz2\"\n                            },\n                            {\n                                \"Ref\": \"PubSubnetAz3\"\n                            }\n                        ]\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"ELB\"\n                                ]\n                            ]\n                        }\n                    }\n                ]\n            },\n            \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"\n        },\n        \"ExternalLoadBalancerSG\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"GroupDescription\": \"External Load Balancer SecurityGroup\",\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"-1\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"FileSystemGP\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"Properties\": {\n                \"FileSystemTags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"EFS-GP\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"PerformanceMode\": \"generalPurpose\"\n            },\n            \"Type\": \"AWS::EFS::FileSystem\"\n        },\n        \"FileSystemMaxIO\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"Properties\": {\n                \"FileSystemTags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"EFS-MaxIO\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"PerformanceMode\": \"maxIO\"\n            },\n            \"Type\": \"AWS::EFS::FileSystem\"\n        },\n        \"InternetGateway\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"IGW\"\n                                ]\n                            ]\n                        }\n                    }\n                ]\n            },\n            \"Type\": \"AWS::EC2::InternetGateway\"\n        },\n        \"LambdaExecutionRole\": {\n            \"Condition\": \"LambdaSupported\",\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sts:AssumeRole\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Principal\": {\n                                \"Service\": [\n                                    \"lambda.amazonaws.com\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"Path\": \"/\",\n                \"Policies\": [\n                    {\n                        \"PolicyDocument\": {\n                            \"Statement\": [\n                                {\n                                    \"Action\": [\n                                        \"logs:CreateLogGroup\",\n                                        \"logs:CreateLogStream\",\n                                        \"logs:PutLogEvents\"\n                                    ],\n                                    \"Effect\": \"Allow\",\n                                    \"Resource\": \"arn:aws:logs:*:*:*\"\n                                },\n                                {\n                                    \"Action\": [\n                                        \"ec2:DescribeAvailabilityZones\"\n                                    ],\n                                    \"Effect\": \"Allow\",\n                                    \"Resource\": \"*\"\n                                }\n                            ],\n                            \"Version\": \"2012-10-17\"\n                        },\n                        \"PolicyName\": \"root\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Role\"\n        },\n        \"ManagerAsg\": {\n            \"CreationPolicy\": {\n                \"ResourceSignal\": {\n                    \"Count\": {\n                        \"Ref\": \"ManagerSize\"\n                    },\n                    \"Timeout\": \"PT20M\"\n                }\n            },\n            \"DependsOn\": [\n                \"SwarmDynDBTable\",\n                \"PubSubnetAz1\",\n                \"PubSubnetAz2\",\n                \"PubSubnetAz3\",\n                \"ExternalLoadBalancer\"\n            ],\n            \"Properties\": {\n                \"DesiredCapacity\": {\n                    \"Ref\": \"ManagerSize\"\n                },\n                \"HealthCheckGracePeriod\": 300,\n                \"HealthCheckType\": \"ELB\",\n                \"LaunchConfigurationName\": {\n                    \"Ref\": \"ManagerLaunchConfig17090cerc2aws1\"\n                },\n                \"LoadBalancerNames\": [\n                    {\n                        \"Ref\": \"ExternalLoadBalancer\"\n                    }\n                ],\n                \"MaxSize\": 6,\n                \"MetricsCollection\": [\n                    {\n                        \"Granularity\": \"1Minute\"\n                    }\n                ],\n                \"MinSize\": 0,\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Manager\"\n                                ]\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"swarm-node-type\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": \"manager\"\n                    },\n                    {\n                        \"Key\": \"swarm-stack-id\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Ref\": \"AWS::StackId\"\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_FOR_AWS_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"forAws\"\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"docker\"\n                            ]\n                        }\n                    }\n                ],\n                \"VPCZoneIdentifier\": [\n                    {\n                        \"Fn::If\": [\n                            \"HasOnly2AZs\",\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        }\n                                    ]\n                                ]\n                            },\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz3\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"UpdatePolicy\": {\n                \"AutoScalingRollingUpdate\": {\n                    \"MaxBatchSize\": \"1\",\n                    \"MinInstancesInService\": {\n                        \"Ref\": \"ManagerSize\"\n                    },\n                    \"PauseTime\": \"PT20M\",\n                    \"WaitOnResourceSignals\": \"true\"\n                }\n            }\n        },\n        \"ManagerLaunchConfig17090cerc2aws1\": {\n            \"DependsOn\": \"ExternalLoadBalancer\",\n            \"Properties\": {\n                \"AssociatePublicIpAddress\": \"true\",\n                \"BlockDeviceMappings\": [\n                    {\n                        \"DeviceName\": \"/dev/xvdb\",\n                        \"Ebs\": {\n                            \"VolumeSize\": {\n                                \"Ref\": \"ManagerDiskSize\"\n                            },\n                            \"VolumeType\": {\n                                \"Ref\": \"ManagerDiskType\"\n                            }\n                        }\n                    }\n                ],\n                \"EbsOptimized\": {\n                    \"Fn::If\": [\n                        \"EBSOptimized\",\n                        \"true\",\n                        \"false\"\n                    ]\n                },\n                \"IamInstanceProfile\": {\n                    \"Ref\": \"ProxyInstanceProfile\"\n                },\n                \"ImageId\": {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegionArch2AMI\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        {\n                            \"Fn::FindInMap\": [\n                                \"AWSInstanceType2Arch\",\n                                {\n                                    \"Ref\": \"ManagerInstanceType\"\n                                },\n                                \"Arch\"\n                            ]\n                        }\n                    ]\n                },\n                \"InstanceType\": {\n                    \"Ref\": \"ManagerInstanceType\"\n                },\n                \"KeyName\": {\n                    \"Ref\": \"KeyName\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"ManagerVpcSG\"\n                    },\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"UserData\": {\n                    \"Fn::Base64\": {\n                        \"Fn::Join\": [\n                            \"\",\n                            [\n                                \"#!/bin/sh\\n\",\n                                \"export EXTERNAL_LB='\",\n                                {\n                                    \"Ref\": \"ExternalLoadBalancer\"\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_FOR_IAAS_VERSION='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"forAws\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export CHANNEL='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"channel\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EDITION_ADDON='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"addOn\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\\n\",\n                                \"export INSTANCE_TYPE=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-type)\\n\",\n                                \"export NODE_AZ=$(wget -qO- http://169.254.169.254/latest/meta-data/placement/availability-zone/)\\n\",\n                                \"export NODE_REGION=$(echo $NODE_AZ | sed 's/.$//')\\n\",\n                                \"export ENABLE_CLOUDWATCH_LOGS='\",\n                                {\n                                    \"Ref\": \"EnableCloudWatchLogs\"\n                                },\n                                \"'\\n\",\n                                \"export AWS_REGION='\",\n                                {\n                                    \"Ref\": \"AWS::Region\"\n                                },\n                                \"'\\n\",\n                                \"export MANAGER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"ManagerVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export WORKER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"NodeVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export DYNAMODB_TABLE='\",\n                                {\n                                    \"Ref\": \"SwarmDynDBTable\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_NAME='\",\n                                {\n                                    \"Ref\": \"AWS::StackName\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_ID='\",\n                                {\n                                    \"Ref\": \"AWS::StackId\"\n                                },\n                                \"'\\n\",\n                                \"export ACCOUNT_ID='\",\n                                {\n                                    \"Ref\": \"AWS::AccountId\"\n                                },\n                                \"'\\n\",\n                                \"export VPC_ID='\",\n                                {\n                                    \"Ref\": \"Vpc\"\n                                },\n                                \"'\\n\",\n                                \"export SWARM_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQS\"\n                                },\n                                \"'\\n\",\n                                \"export CLEANUP_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQSCleanup\"\n                                },\n                                \"'\\n\",\n                                \"export RUN_VACUUM='\",\n                                {\n                                    \"Ref\": \"EnableSystemPrune\"\n                                },\n                                \"'\\n\",\n                                \"export LOG_GROUP_NAME='\",\n                                {\n                                    \"Fn::Join\": [\n                                        \"-\",\n                                        [\n                                            {\n                                                \"Ref\": \"AWS::StackName\"\n                                            },\n                                            \"lg\"\n                                        ]\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export HAS_DDC='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"HasDDC\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export ENABLE_EFS='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        \"1\",\n                                        \"0\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_REGULAR='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemGP\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_MAXIO='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemMaxIO\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_EXPERIMENTAL='true' \\n\",\n                                \"export NODE_TYPE='manager'\\n\",\n                                \"export INSTANCE_NAME='ManagerAsg'\\n\",\n                                \"\\n\",\n                                \"mkdir -p /var/lib/docker/editions\\n\",\n                                \"echo \\\"$EXTERNAL_LB\\\" \u003e /var/lib/docker/editions/lb_name\\n\",\n                                \"echo \\\"# hostname : ELB_name\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"127.0.0.1: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"localhost: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"default: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"\\n\",\n                                \"echo '{\\\"experimental\\\": '$DOCKER_EXPERIMENTAL', \\\"labels\\\":[\\\"os=linux\\\", \\\"region='$NODE_REGION'\\\", \\\"availability_zone='$NODE_AZ'\\\", \\\"instance_type='$INSTANCE_TYPE'\\\", \\\"node_type='$NODE_TYPE'\\\" ]' \u003e /etc/docker/daemon.json\\n\",\n                                \"\\n\",\n                                \"if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then\\n\",\n                                \"   echo ', \\\"log-driver\\\": \\\"awslogs\\\", \\\"log-opts\\\": {\\\"awslogs-group\\\": \\\"'$LOG_GROUP_NAME'\\\", \\\"tag\\\": \\\"{{.Name}}-{{.ID}}\\\" }}' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"else\\n\",\n                                \"   echo ' }' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"fi\\n\",\n                                \"\\n\",\n                                \"chown -R docker /home/docker/\\n\",\n                                \"chgrp -R docker /home/docker/\\n\",\n                                \"rc-service docker restart\\n\",\n                                \"sleep 5\\n\",\n                                \"\\n\",\n                                \"# init-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --restart=no -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e INSTANCE_NAME=$INSTANCE_NAME -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -v /var/run/docker.sock:/var/run/docker.sock -v /var/log:/var/log docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# guide-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --log-opt max-size=50m --name=guide-aws --restart=always -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e INSTANCE_NAME=$INSTANCE_NAME -e VPC_ID=$VPC_ID -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e SWARM_QUEUE=\\\"$SWARM_QUEUE\\\" -e CLEANUP_QUEUE=\\\"$CLEANUP_QUEUE\\\" -e RUN_VACUUM=$RUN_VACUUM -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -e CHANNEL=$CHANNEL -v /var/run/docker.sock:/var/run/docker.sock docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# cloudstor\\n\",\n                                \"docker plugin install --alias cloudstor:aws --grant-all-permissions docker4x/cloudstor:$DOCKER_FOR_IAAS_VERSION CLOUD_PLATFORM=AWS EFS_ID_REGULAR=$EFS_ID_REGULAR EFS_ID_MAXIO=$EFS_ID_MAXIO AWS_REGION=$AWS_REGION AWS_STACK_ID=$STACK_ID EFS_SUPPORTED=$ENABLE_EFS DEBUG=1\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file  --log-opt max-size=50m --name=meta-aws --restart=always -d -p $LOCAL_IP:9024:8080 -e AWS_REGION=$AWS_REGION -e MANAGER_SECURITY_GROUP_ID=$MANAGER_SECURITY_GROUP_ID -e WORKER_SECURITY_GROUP_ID=$WORKER_SECURITY_GROUP_ID -v /var/run/docker.sock:/var/run/docker.sock docker4x/meta-aws:$DOCKER_FOR_IAAS_VERSION metaserver -iaas_provider=aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file  --log-opt max-size=50m --name=l4controller-aws --restart=always -d -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/editions:/var/lib/docker/editions docker4x/l4controller-aws:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\\n\"\n                            ]\n                        ]\n                    }\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"\n        },\n        \"ManagerVpcSG\": {\n            \"DependsOn\": \"NodeVpcSG\",\n            \"Properties\": {\n                \"GroupDescription\": \"Manager SecurityGroup\",\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"22\",\n                        \"IpProtocol\": \"tcp\",\n                        \"ToPort\": \"22\"\n                    },\n                    {\n                        \"IpProtocol\": \"50\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        }\n                    },\n                    {\n                        \"FromPort\": \"2377\",\n                        \"IpProtocol\": \"tcp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"2377\"\n                    },\n                    {\n                        \"FromPort\": \"4789\",\n                        \"IpProtocol\": \"udp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"4789\"\n                    },\n                    {\n                        \"FromPort\": \"7946\",\n                        \"IpProtocol\": \"tcp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"7946\"\n                    },\n                    {\n                        \"FromPort\": \"7946\",\n                        \"IpProtocol\": \"udp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"7946\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"MountTargetGP1\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemGP\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemGP\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz1\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetGP2\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemGP\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemGP\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz2\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetGP3\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemGP\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemGP\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz3\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetMaxIO1\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemMaxIO\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemMaxIO\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz1\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetMaxIO2\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemMaxIO\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemMaxIO\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz2\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetMaxIO3\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemMaxIO\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemMaxIO\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz3\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"NodeAsg\": {\n            \"CreationPolicy\": {\n                \"ResourceSignal\": {\n                    \"Count\": {\n                        \"Ref\": \"ClusterSize\"\n                    },\n                    \"Timeout\": \"PT20M\"\n                }\n            },\n            \"DependsOn\": \"ManagerAsg\",\n            \"Properties\": {\n                \"DesiredCapacity\": {\n                    \"Ref\": \"ClusterSize\"\n                },\n                \"HealthCheckGracePeriod\": 300,\n                \"HealthCheckType\": \"ELB\",\n                \"LaunchConfigurationName\": {\n                    \"Ref\": \"NodeLaunchConfig17090cerc2aws1\"\n                },\n                \"LoadBalancerNames\": [\n                    {\n                        \"Ref\": \"ExternalLoadBalancer\"\n                    }\n                ],\n                \"MaxSize\": 1000,\n                \"MetricsCollection\": [\n                    {\n                        \"Granularity\": \"1Minute\"\n                    }\n                ],\n                \"MinSize\": 0,\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"worker\"\n                                ]\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"swarm-node-type\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": \"worker\"\n                    },\n                    {\n                        \"Key\": \"swarm-stack-id\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Ref\": \"AWS::StackId\"\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_FOR_AWS_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"forAws\"\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"docker\"\n                            ]\n                        }\n                    }\n                ],\n                \"VPCZoneIdentifier\": [\n                    {\n                        \"Fn::If\": [\n                            \"HasOnly2AZs\",\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        }\n                                    ]\n                                ]\n                            },\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz3\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"UpdatePolicy\": {\n                \"AutoScalingRollingUpdate\": {\n                    \"MaxBatchSize\": \"1\",\n                    \"MinInstancesInService\": {\n                        \"Ref\": \"ClusterSize\"\n                    },\n                    \"PauseTime\": \"PT20M\",\n                    \"WaitOnResourceSignals\": \"true\"\n                }\n            }\n        },\n        \"NodeLaunchConfig17090cerc2aws1\": {\n            \"DependsOn\": \"ManagerAsg\",\n            \"Properties\": {\n                \"AssociatePublicIpAddress\": \"true\",\n                \"BlockDeviceMappings\": [\n                    {\n                        \"DeviceName\": \"/dev/xvdb\",\n                        \"Ebs\": {\n                            \"VolumeSize\": {\n                                \"Ref\": \"WorkerDiskSize\"\n                            },\n                            \"VolumeType\": {\n                                \"Ref\": \"WorkerDiskType\"\n                            }\n                        }\n                    }\n                ],\n                \"EbsOptimized\": {\n                    \"Fn::If\": [\n                        \"EBSOptimized\",\n                        \"true\",\n                        \"false\"\n                    ]\n                },\n                \"IamInstanceProfile\": {\n                    \"Ref\": \"WorkerInstanceProfile\"\n                },\n                \"ImageId\": {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegionArch2AMI\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        {\n                            \"Fn::FindInMap\": [\n                                \"AWSInstanceType2Arch\",\n                                {\n                                    \"Ref\": \"InstanceType\"\n                                },\n                                \"Arch\"\n                            ]\n                        }\n                    ]\n                },\n                \"InstanceType\": {\n                    \"Ref\": \"InstanceType\"\n                },\n                \"KeyName\": {\n                    \"Ref\": \"KeyName\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"NodeVpcSG\"\n                    }\n                ],\n                \"UserData\": {\n                    \"Fn::Base64\": {\n                        \"Fn::Join\": [\n                            \"\",\n                            [\n                                \"#!/bin/sh\\n\",\n                                \"export EXTERNAL_LB='\",\n                                {\n                                    \"Ref\": \"ExternalLoadBalancer\"\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_FOR_IAAS_VERSION='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"forAws\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export CHANNEL='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"channel\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EDITION_ADDON='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"addOn\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\\n\",\n                                \"export INSTANCE_TYPE=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-type)\\n\",\n                                \"export NODE_AZ=$(wget -qO- http://169.254.169.254/latest/meta-data/placement/availability-zone/)\\n\",\n                                \"export NODE_REGION=$(echo $NODE_AZ | sed 's/.$//')\\n\",\n                                \"export ENABLE_CLOUDWATCH_LOGS='\",\n                                {\n                                    \"Ref\": \"EnableCloudWatchLogs\"\n                                },\n                                \"'\\n\",\n                                \"export AWS_REGION='\",\n                                {\n                                    \"Ref\": \"AWS::Region\"\n                                },\n                                \"'\\n\",\n                                \"export MANAGER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"ManagerVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export WORKER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"NodeVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export DYNAMODB_TABLE='\",\n                                {\n                                    \"Ref\": \"SwarmDynDBTable\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_NAME='\",\n                                {\n                                    \"Ref\": \"AWS::StackName\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_ID='\",\n                                {\n                                    \"Ref\": \"AWS::StackId\"\n                                },\n                                \"'\\n\",\n                                \"export ACCOUNT_ID='\",\n                                {\n                                    \"Ref\": \"AWS::AccountId\"\n                                },\n                                \"'\\n\",\n                                \"export VPC_ID='\",\n                                {\n                                    \"Ref\": \"Vpc\"\n                                },\n                                \"'\\n\",\n                                \"export SWARM_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQS\"\n                                },\n                                \"'\\n\",\n                                \"export CLEANUP_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQSCleanup\"\n                                },\n                                \"'\\n\",\n                                \"export RUN_VACUUM='\",\n                                {\n                                    \"Ref\": \"EnableSystemPrune\"\n                                },\n                                \"'\\n\",\n                                \"export LOG_GROUP_NAME='\",\n                                {\n                                    \"Fn::Join\": [\n                                        \"-\",\n                                        [\n                                            {\n                                                \"Ref\": \"AWS::StackName\"\n                                            },\n                                            \"lg\"\n                                        ]\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export HAS_DDC='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"HasDDC\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export ENABLE_EFS='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        \"1\",\n                                        \"0\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_REGULAR='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemGP\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_MAXIO='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemMaxIO\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_EXPERIMENTAL='true' \\n\",\n                                \"export NODE_TYPE='worker'\\n\",\n                                \"export INSTANCE_NAME='NodeAsg'\\n\",\n                                \"\\n\",\n                                \"mkdir -p /var/lib/docker/editions\\n\",\n                                \"echo \\\"$EXTERNAL_LB\\\" \u003e /var/lib/docker/editions/lb_name\\n\",\n                                \"echo \\\"# hostname : ELB_name\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"127.0.0.1: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"localhost: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"default: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"\\n\",\n                                \"echo '{\\\"experimental\\\": '$DOCKER_EXPERIMENTAL', \\\"labels\\\":[\\\"os=linux\\\", \\\"region='$NODE_REGION'\\\", \\\"availability_zone='$NODE_AZ'\\\", \\\"instance_type='$INSTANCE_TYPE'\\\", \\\"node_type='$NODE_TYPE'\\\" ]' \u003e /etc/docker/daemon.json\\n\",\n                                \"\\n\",\n                                \"if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then\\n\",\n                                \"   echo ', \\\"log-driver\\\": \\\"awslogs\\\", \\\"log-opts\\\": {\\\"awslogs-group\\\": \\\"'$LOG_GROUP_NAME'\\\", \\\"tag\\\": \\\"{{.Name}}-{{.ID}}\\\" }}' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"else\\n\",\n                                \"   echo ' }' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"fi\\n\",\n                                \"\\n\",\n                                \"chown -R docker /home/docker/\\n\",\n                                \"chgrp -R docker /home/docker/\\n\",\n                                \"rc-service docker restart\\n\",\n                                \"sleep 5\\n\",\n                                \"\\n\",\n                                \"# init-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --restart=no -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e INSTANCE_NAME=$INSTANCE_NAME -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -v /var/run/docker.sock:/var/run/docker.sock -v /var/log:/var/log docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# guide-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --log-opt max-size=50m --name=guide-aws --restart=always -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e INSTANCE_NAME=$INSTANCE_NAME -e VPC_ID=$VPC_ID -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e SWARM_QUEUE=\\\"$SWARM_QUEUE\\\" -e CLEANUP_QUEUE=\\\"$CLEANUP_QUEUE\\\" -e RUN_VACUUM=$RUN_VACUUM -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -e CHANNEL=$CHANNEL -v /var/run/docker.sock:/var/run/docker.sock docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# cloudstor\\n\",\n                                \"docker plugin install --alias cloudstor:aws --grant-all-permissions docker4x/cloudstor:$DOCKER_FOR_IAAS_VERSION CLOUD_PLATFORM=AWS EFS_ID_REGULAR=$EFS_ID_REGULAR EFS_ID_MAXIO=$EFS_ID_MAXIO AWS_REGION=$AWS_REGION AWS_STACK_ID=$STACK_ID EFS_SUPPORTED=$ENABLE_EFS DEBUG=1\\n\",\n                                \"# Worker user data\\n\"\n                            ]\n                        ]\n                    }\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"\n        },\n        \"NodeVpcSG\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"GroupDescription\": \"Node SecurityGroup\",\n                \"SecurityGroupEgress\": [\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"8\",\n                        \"IpProtocol\": \"icmp\",\n                        \"ToPort\": \"0\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"IpProtocol\": \"50\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"udp\",\n                        \"ToPort\": \"65535\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"tcp\",\n                        \"ToPort\": \"2374\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"2376\",\n                        \"IpProtocol\": \"tcp\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": {\n                            \"Fn::FindInMap\": [\n                                \"VpcCidrs\",\n                                \"vpc\",\n                                \"cidr\"\n                            ]\n                        },\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"-1\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"ProxyInstanceProfile\": {\n            \"DependsOn\": \"ProxyRole\",\n            \"Properties\": {\n                \"Path\": \"/\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::InstanceProfile\"\n        },\n        \"ProxyPolicies\": {\n            \"DependsOn\": \"ProxyRole\",\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"elasticloadbalancing:DeregisterInstancesFromLoadBalancer\",\n                                \"elasticloadbalancing:CreateLoadBalancerListeners\",\n                                \"elasticloadbalancing:DeleteLoadBalancerListeners\",\n                                \"elasticloadbalancing:ConfigureHealthCheck\",\n                                \"elasticloadbalancing:DescribeTags\",\n                                \"elasticloadbalancing:SetLoadBalancerListenerSSLCertificate\",\n                                \"elasticloadbalancing:DescribeSSLPolicies\",\n                                \"elasticloadbalancing:DescribeLoadBalancers\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"elb-update\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"ProxyRole\": {\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sts:AssumeRole\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Principal\": {\n                                \"Service\": [\n                                    \"ec2.amazonaws.com\",\n                                    \"autoscaling.amazonaws.com\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"Path\": \"/\"\n            },\n            \"Type\": \"AWS::IAM::Role\"\n        },\n        \"PubSubnet1RouteTableAssociation\": {\n            \"DependsOn\": [\n                \"PubSubnetAz1\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                },\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz1\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n        },\n        \"PubSubnet2RouteTableAssociation\": {\n            \"DependsOn\": [\n                \"PubSubnetAz2\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                },\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz2\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n        },\n        \"PubSubnet3RouteTableAssociation\": {\n            \"DependsOn\": [\n                \"PubSubnetAz3\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                },\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz3\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n        },\n        \"PubSubnetAz1\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\n                    \"Fn::If\": [\n                        \"LambdaSupported\",\n                        {\n                            \"Fn::GetAtt\": [\n                                \"AZInfo\",\n                                \"AZ0\"\n                            ]\n                        },\n                        {\n                            \"Fn::Select\": [\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"AWSRegion2AZ\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \"AZ0\"\n                                    ]\n                                },\n                                {\n                                    \"Fn::GetAZs\": {\n                                        \"Ref\": \"AWS::Region\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"pubsubnet1\",\n                        \"cidr\"\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Subnet1\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Subnet\"\n        },\n        \"PubSubnetAz2\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\n                    \"Fn::If\": [\n                        \"LambdaSupported\",\n                        {\n                            \"Fn::GetAtt\": [\n                                \"AZInfo\",\n                                \"AZ1\"\n                            ]\n                        },\n                        {\n                            \"Fn::Select\": [\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"AWSRegion2AZ\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \"AZ1\"\n                                    ]\n                                },\n                                {\n                                    \"Fn::GetAZs\": {\n                                        \"Ref\": \"AWS::Region\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"pubsubnet2\",\n                        \"cidr\"\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Subnet2\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Subnet\"\n        },\n        \"PubSubnetAz3\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\n                    \"Fn::If\": [\n                        \"LambdaSupported\",\n                        {\n                            \"Fn::GetAtt\": [\n                                \"AZInfo\",\n                                \"AZ2\"\n                            ]\n                        },\n                        {\n                            \"Fn::Select\": [\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"AWSRegion2AZ\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \"AZ2\"\n                                    ]\n                                },\n                                {\n                                    \"Fn::GetAZs\": {\n                                        \"Ref\": \"AWS::Region\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"pubsubnet3\",\n                        \"cidr\"\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Subnet3\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Subnet\"\n        },\n        \"PublicRouteViaIgw\": {\n            \"DependsOn\": [\n                \"AttachGateway\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"DestinationCidrBlock\": \"0.0.0.0/0\",\n                \"GatewayId\": {\n                    \"Ref\": \"InternetGateway\"\n                },\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Route\"\n        },\n        \"RouteViaIgw\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"RT\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::RouteTable\"\n        },\n        \"SwarmAPIPolicy\": {\n            \"DependsOn\": \"ProxyRole\",\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"ec2:DescribeInstances\",\n                                \"ec2:DescribeVpcAttribute\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmAutoscalePolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"autoscaling:RecordLifecycleActionHeartbeat\",\n                                \"autoscaling:CompleteLifecycleAction\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-autoscale-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmDynDBTable\": {\n            \"DependsOn\": \"ExternalLoadBalancer\",\n            \"Properties\": {\n                \"AttributeDefinitions\": [\n                    {\n                        \"AttributeName\": \"node_type\",\n                        \"AttributeType\": \"S\"\n                    }\n                ],\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"node_type\",\n                        \"KeyType\": \"HASH\"\n                    }\n                ],\n                \"ProvisionedThroughput\": {\n                    \"ReadCapacityUnits\": 1,\n                    \"WriteCapacityUnits\": 1\n                },\n                \"TableName\": {\n                    \"Fn::Join\": [\n                        \"-\",\n                        [\n                            {\n                                \"Ref\": \"AWS::StackName\"\n                            },\n                            \"dyndbtable\"\n                        ]\n                    ]\n                }\n            },\n            \"Type\": \"AWS::DynamoDB::Table\"\n        },\n        \"SwarmLogPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"logs:CreateLogStream\",\n                                \"logs:PutLogEvents\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-log-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmManagerUpgradeHook\": {\n            \"DependsOn\": \"SwarmSQS\",\n            \"Properties\": {\n                \"AutoScalingGroupName\": {\n                    \"Ref\": \"ManagerAsg\"\n                },\n                \"HeartbeatTimeout\": \"600\",\n                \"LifecycleTransition\": \"autoscaling:EC2_INSTANCE_TERMINATING\",\n                \"NotificationTargetARN\": {\n                    \"Fn::GetAtt\": [\n                        \"SwarmSQS\",\n                        \"Arn\"\n                    ]\n                },\n                \"RoleARN\": {\n                    \"Fn::GetAtt\": [\n                        \"ProxyRole\",\n                        \"Arn\"\n                    ]\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LifecycleHook\"\n        },\n        \"SwarmSQS\": {\n            \"Properties\": {\n                \"MessageRetentionPeriod\": 43200,\n                \"ReceiveMessageWaitTimeSeconds\": 10\n            },\n            \"Type\": \"AWS::SQS::Queue\"\n        },\n        \"SwarmSQSCleanup\": {\n            \"Properties\": {\n                \"MessageRetentionPeriod\": 43200,\n                \"ReceiveMessageWaitTimeSeconds\": 10\n            },\n            \"Type\": \"AWS::SQS::Queue\"\n        },\n        \"SwarmSQSCleanupPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\",\n                \"SwarmSQSCleanup\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sqs:DeleteMessage\",\n                                \"sqs:ReceiveMessage\",\n                                \"sqs:SendMessage\",\n                                \"sqs:GetQueueAttributes\",\n                                \"sqs:GetQueueUrl\",\n                                \"sqs:ListQueues\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::GetAtt\": [\n                                    \"SwarmSQSCleanup\",\n                                    \"Arn\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-sqs-cleanup-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmSQSPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\",\n                \"SwarmSQS\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sqs:DeleteMessage\",\n                                \"sqs:ReceiveMessage\",\n                                \"sqs:SendMessage\",\n                                \"sqs:GetQueueAttributes\",\n                                \"sqs:GetQueueUrl\",\n                                \"sqs:ListQueues\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::GetAtt\": [\n                                    \"SwarmSQS\",\n                                    \"Arn\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-sqs-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmWideSG\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"GroupDescription\": \"Swarm wide access\",\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": {\n                            \"Fn::FindInMap\": [\n                                \"VpcCidrs\",\n                                \"vpc\",\n                                \"cidr\"\n                            ]\n                        },\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"-1\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"SwarmWorkerUpgradeHook\": {\n            \"DependsOn\": \"SwarmSQS\",\n            \"Properties\": {\n                \"AutoScalingGroupName\": {\n                    \"Ref\": \"NodeAsg\"\n                },\n                \"HeartbeatTimeout\": \"600\",\n                \"LifecycleTransition\": \"autoscaling:EC2_INSTANCE_TERMINATING\",\n                \"NotificationTargetARN\": {\n                    \"Fn::GetAtt\": [\n                        \"SwarmSQS\",\n                        \"Arn\"\n                    ]\n                },\n                \"RoleARN\": {\n                    \"Fn::GetAtt\": [\n                        \"WorkerRole\",\n                        \"Arn\"\n                    ]\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LifecycleHook\"\n        },\n        \"Vpc\": {\n            \"Properties\": {\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"vpc\",\n                        \"cidr\"\n                    ]\n                },\n                \"EnableDnsHostnames\": \"true\",\n                \"EnableDnsSupport\": \"true\",\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"VPC\"\n                                ]\n                            ]\n                        }\n                    }\n                ]\n            },\n            \"Type\": \"AWS::EC2::VPC\"\n        },\n        \"WorkerInstanceProfile\": {\n            \"DependsOn\": \"WorkerRole\",\n            \"Properties\": {\n                \"Path\": \"/\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::InstanceProfile\"\n        },\n        \"WorkerRole\": {\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sts:AssumeRole\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Principal\": {\n                                \"Service\": [\n                                    \"ec2.amazonaws.com\",\n                                    \"autoscaling.amazonaws.com\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"Path\": \"/\"\n            },\n            \"Type\": \"AWS::IAM::Role\"\n        }\n    }\n}",
                            "template": "{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Conditions\": {\n        \"CloudStorEfsSelected\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"EnableCloudStorEfs\"\n                },\n                \"yes\"\n            ]\n        },\n        \"CreateLogResources\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"EnableCloudWatchLogs\"\n                },\n                \"yes\"\n            ]\n        },\n        \"EBSOptimized\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"EnableEbsOptimized\"\n                },\n                \"yes\"\n            ]\n        },\n        \"EFSSupported\": {\n            \"Fn::Equals\": [\n                {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegion2AZ\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"EFSSupport\"\n                    ]\n                },\n                \"yes\"\n            ]\n        },\n        \"HasOnly2AZs\": {\n            \"Fn::Equals\": [\n                {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegion2AZ\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"NumAZs\"\n                    ]\n                },\n                \"2\"\n            ]\n        },\n        \"InstallCloudStorEFSPreReqs\": {\n            \"Fn::And\": [\n                {\n                    \"Condition\": \"EFSSupported\"\n                },\n                {\n                    \"Condition\": \"CloudStorEfsSelected\"\n                }\n            ]\n        },\n        \"LambdaSupported\": {\n            \"Fn::Equals\": [\n                {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegion2AZ\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"LambdaSupport\"\n                    ]\n                },\n                \"yes\"\n            ]\n        }\n    },\n    \"Description\": \"Docker CE for AWS 17.09.0-ce-rc2 (17.09.0-ce-rc2-aws1)\",\n    \"Mappings\": {\n        \"AWSInstanceType2Arch\": {\n            \"c3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"c4.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"cc2.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"cr1.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"d2.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"g2.2xlarge\": {\n                \"Arch\": \"HVMG2\"\n            },\n            \"hi1.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"hs1.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.16xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"i3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.medium\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.10xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.16xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"m4.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r3.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.16xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.4xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.8xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"r4.xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.2xlarge\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.large\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.medium\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.micro\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.small\": {\n                \"Arch\": \"HVM64\"\n            },\n            \"t2.xlarge\": {\n                \"Arch\": \"HVM64\"\n            }\n        },\n        \"AWSRegion2AZ\": {\n            \"ap-northeast-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Tokyo\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-northeast-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Seoul\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-south-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Mumbai\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-southeast-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Singapore\",\n                \"NumAZs\": \"2\"\n            },\n            \"ap-southeast-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Sydney\",\n                \"NumAZs\": \"3\"\n            },\n            \"ca-central-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"no\",\n                \"Name\": \"Central\",\n                \"NumAZs\": \"2\"\n            },\n            \"eu-central-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Frankfurt\",\n                \"NumAZs\": \"2\"\n            },\n            \"eu-west-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Ireland\",\n                \"NumAZs\": \"3\"\n            },\n            \"eu-west-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"London\",\n                \"NumAZs\": \"2\"\n            },\n            \"sa-east-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"no\",\n                \"Name\": \"Sao Paulo\",\n                \"NumAZs\": \"2\"\n            },\n            \"us-east-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"N. Virgina\",\n                \"NumAZs\": \"4\"\n            },\n            \"us-east-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Ohio\",\n                \"NumAZs\": \"3\"\n            },\n            \"us-gov-west-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"no\",\n                \"Name\": \"GovCloud\",\n                \"NumAZs\": \"2\"\n            },\n            \"us-west-1\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"0\",\n                \"EFSSupport\": \"no\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"N. California\",\n                \"NumAZs\": \"2\"\n            },\n            \"us-west-2\": {\n                \"AZ0\": \"0\",\n                \"AZ1\": \"1\",\n                \"AZ2\": \"2\",\n                \"EFSSupport\": \"yes\",\n                \"LambdaSupport\": \"yes\",\n                \"Name\": \"Oregon\",\n                \"NumAZs\": \"3\"\n            }\n        },\n        \"AWSRegionArch2AMI\": {\n            \"ap-northeast-1\": {\n                \"HVM64\": \"ami-cc7ebcaa\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-northeast-2\": {\n                \"HVM64\": \"ami-0404df6a\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-south-1\": {\n                \"HVM64\": \"ami-d6f0b7b9\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-southeast-1\": {\n                \"HVM64\": \"ami-61651002\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ap-southeast-2\": {\n                \"HVM64\": \"ami-b53ed9d7\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"ca-central-1\": {\n                \"HVM64\": \"ami-76ce7712\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"eu-central-1\": {\n                \"HVM64\": \"ami-3bf14754\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"eu-west-1\": {\n                \"HVM64\": \"ami-0f25e676\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"eu-west-2\": {\n                \"HVM64\": \"ami-691d0e0d\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"sa-east-1\": {\n                \"HVM64\": \"ami-94364bf8\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-east-1\": {\n                \"HVM64\": \"ami-8a7b9cf0\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-east-2\": {\n                \"HVM64\": \"ami-5fe6c43a\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-west-1\": {\n                \"HVM64\": \"ami-19497f79\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            },\n            \"us-west-2\": {\n                \"HVM64\": \"ami-39817241\",\n                \"HVMG2\": \"NOT_SUPPORTED\"\n            }\n        },\n        \"DockerForAWS\": {\n            \"version\": {\n                \"HasDDC\": \"no\",\n                \"addOn\": \"base\",\n                \"channel\": \"test\",\n                \"docker\": \"17.09.0-ce-rc2\",\n                \"forAws\": \"17.09.0-ce-rc2-aws1\"\n            }\n        },\n        \"VpcCidrs\": {\n            \"pubsubnet1\": {\n                \"cidr\": \"172.31.0.0/20\"\n            },\n            \"pubsubnet2\": {\n                \"cidr\": \"172.31.16.0/20\"\n            },\n            \"pubsubnet3\": {\n                \"cidr\": \"172.31.32.0/20\"\n            },\n            \"pubsubnet4\": {\n                \"cidr\": \"172.31.48.0/20\"\n            },\n            \"vpc\": {\n                \"cidr\": \"172.31.0.0/16\"\n            }\n        }\n    },\n    \"Metadata\": {\n        \"AWS::CloudFormation::Interface\": {\n            \"ParameterGroups\": [\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Size\"\n                    },\n                    \"Parameters\": [\n                        \"ManagerSize\",\n                        \"ClusterSize\"\n                    ]\n                },\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Properties\"\n                    },\n                    \"Parameters\": [\n                        \"KeyName\",\n                        \"EnableSystemPrune\",\n                        \"EnableCloudWatchLogs\",\n                        \"EnableCloudStorEfs\"\n                    ]\n                },\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Manager Properties\"\n                    },\n                    \"Parameters\": [\n                        \"ManagerInstanceType\",\n                        \"ManagerDiskSize\",\n                        \"ManagerDiskType\"\n                    ]\n                },\n                {\n                    \"Label\": {\n                        \"default\": \"Swarm Worker Properties\"\n                    },\n                    \"Parameters\": [\n                        \"InstanceType\",\n                        \"WorkerDiskSize\",\n                        \"WorkerDiskType\"\n                    ]\n                }\n            ],\n            \"ParameterLabels\": {\n                \"ClusterSize\": {\n                    \"default\": \"Number of Swarm worker nodes?\"\n                },\n                \"EnableCloudStorEfs\": {\n                    \"default\": \"Create EFS prerequsities for CloudStor?\"\n                },\n                \"EnableCloudWatchLogs\": {\n                    \"default\": \"Use Cloudwatch for container logging?\"\n                },\n                \"EnableEbsOptimized\": {\n                    \"default\": \"Enable EBS I/O optimization?\"\n                },\n                \"EnableSystemPrune\": {\n                    \"default\": \"Enable daily resource cleanup?\"\n                },\n                \"InstanceType\": {\n                    \"default\": \"Agent worker instance type?\"\n                },\n                \"KeyName\": {\n                    \"default\": \"Which SSH key to use?\"\n                },\n                \"ManagerDiskSize\": {\n                    \"default\": \"Manager ephemeral storage volume size?\"\n                },\n                \"ManagerDiskType\": {\n                    \"default\": \"Manager ephemeral storage volume type\"\n                },\n                \"ManagerInstanceType\": {\n                    \"default\": \"Swarm manager instance type?\"\n                },\n                \"ManagerSize\": {\n                    \"default\": \"Number of Swarm managers?\"\n                },\n                \"WorkerDiskSize\": {\n                    \"default\": \"Worker ephemeral storage volume size?\"\n                },\n                \"WorkerDiskType\": {\n                    \"default\": \"Worker ephemeral storage volume type\"\n                }\n            }\n        }\n    },\n    \"Outputs\": {\n        \"DefaultDNSTarget\": {\n            \"Description\": \"Use this name to update your DNS records\",\n            \"Value\": {\n                \"Fn::GetAtt\": [\n                    \"ExternalLoadBalancer\",\n                    \"DNSName\"\n                ]\n            }\n        },\n        \"ELBDNSZoneID\": {\n            \"Description\": \"Use this zone ID to update your DNS records\",\n            \"Value\": {\n                \"Fn::GetAtt\": [\n                    \"ExternalLoadBalancer\",\n                    \"CanonicalHostedZoneNameID\"\n                ]\n            }\n        },\n        \"ManagerSecurityGroupID\": {\n            \"Description\": \"SecurityGroup ID of ManagerVpcSG\",\n            \"Value\": {\n                \"Ref\": \"ManagerVpcSG\"\n            }\n        },\n        \"Managers\": {\n            \"Description\": \"You can see the manager nodes associated with this cluster here. Follow the instructions here: https://docs.docker.com/docker-for-aws/deploy/\",\n            \"Value\": {\n                \"Fn::Join\": [\n                    \"\",\n                    [\n                        \"https://\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \".console.aws.amazon.com/ec2/v2/home?region=\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        \"#Instances:tag:aws:autoscaling:groupName=\",\n                        {\n                            \"Ref\": \"ManagerAsg\"\n                        },\n                        \";sort=desc:dnsName\"\n                    ]\n                ]\n            }\n        },\n        \"NodeSecurityGroupID\": {\n            \"Description\": \"SecurityGroup ID of NodeVpcSG\",\n            \"Value\": {\n                \"Ref\": \"NodeVpcSG\"\n            }\n        },\n        \"SwarmWideSecurityGroupID\": {\n            \"Description\": \"SecurityGroup ID of SwarmWideSG\",\n            \"Value\": {\n                \"Ref\": \"SwarmWideSG\"\n            }\n        },\n        \"VPCID\": {\n            \"Description\": \"Use this as the VPC for configuring Private Hosted Zones\",\n            \"Value\": {\n                \"Ref\": \"Vpc\"\n            }\n        },\n        \"ZoneAvailabilityComment\": {\n            \"Description\": \"Availabilty Zones Comment\",\n            \"Value\": {\n                \"Fn::If\": [\n                    \"HasOnly2AZs\",\n                    \"This region only has 2 Availabiliy Zones (AZ). If one of those AZs goes away, it will cause problems for your Swarm Managers. Please use a Region with at least 3 AZs.\",\n                    \"This region has at least 3 Availability Zones (AZ). This is ideal to ensure a fully functional Swarm in case you lose an AZ.\"\n                ]\n            }\n        }\n    },\n    \"Parameters\": {\n        \"ClusterSize\": {\n            \"Default\": \"5\",\n            \"Description\": \"Number of worker nodes in the Swarm (0-1000).\",\n            \"MaxValue\": \"1000\",\n            \"MinValue\": \"0\",\n            \"Type\": \"Number\"\n        },\n        \"EnableCloudStorEfs\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"no\",\n            \"Description\": \"Create CloudStor EFS mount targets\",\n            \"Type\": \"String\"\n        },\n        \"EnableCloudWatchLogs\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"yes\",\n            \"Description\": \"Send all Container logs to CloudWatch\",\n            \"Type\": \"String\"\n        },\n        \"EnableEbsOptimized\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"no\",\n            \"Description\": \"Specifies whether the launch configuration is optimized for EBS I/O\",\n            \"Type\": \"String\"\n        },\n        \"EnableSystemPrune\": {\n            \"AllowedValues\": [\n                \"no\",\n                \"yes\"\n            ],\n            \"Default\": \"no\",\n            \"Description\": \"Cleans up unused images, containers, networks and volumes\",\n            \"Type\": \"String\"\n        },\n        \"InstanceType\": {\n            \"AllowedValues\": [\n                \"t2.micro\",\n                \"t2.small\",\n                \"t2.medium\",\n                \"t2.large\",\n                \"t2.xlarge\",\n                \"t2.2xlarge\",\n                \"m4.large\",\n                \"m4.xlarge\",\n                \"m4.2xlarge\",\n                \"m4.4xlarge\",\n                \"m4.10xlarge\",\n                \"m4.16xlarge\",\n                \"m3.medium\",\n                \"m3.large\",\n                \"m3.xlarge\",\n                \"m3.2xlarge\",\n                \"c4.large\",\n                \"c4.xlarge\",\n                \"c4.2xlarge\",\n                \"c4.4xlarge\",\n                \"c4.8xlarge\",\n                \"c3.large\",\n                \"c3.xlarge\",\n                \"c3.2xlarge\",\n                \"c3.4xlarge\",\n                \"c3.8xlarge\",\n                \"r3.large\",\n                \"r3.xlarge\",\n                \"r3.2xlarge\",\n                \"r3.4xlarge\",\n                \"r3.8xlarge\",\n                \"r4.large\",\n                \"r4.xlarge\",\n                \"r4.2xlarge\",\n                \"r4.4xlarge\",\n                \"r4.8xlarge\",\n                \"r4.16xlarge\",\n                \"i3.large\",\n                \"i3.xlarge\",\n                \"i3.2xlarge\",\n                \"i3.4xlarge\",\n                \"i3.8xlarge\",\n                \"i3.16xlarge\"\n            ],\n            \"ConstraintDescription\": \"Must be a valid EC2 HVM instance type.\",\n            \"Default\": \"t2.micro\",\n            \"Description\": \"EC2 HVM instance type (t2.micro, m3.medium, etc).\",\n            \"Type\": \"String\"\n        },\n        \"KeyName\": {\n            \"ConstraintDescription\": \"Must be the name of an existing EC2 KeyPair\",\n            \"Description\": \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n            \"Type\": \"AWS::EC2::KeyPair::KeyName\"\n        },\n        \"ManagerDiskSize\": {\n            \"Default\": \"20\",\n            \"Description\": \"Size of Manager's ephemeral storage volume in GiB\",\n            \"MaxValue\": \"1024\",\n            \"MinValue\": \"20\",\n            \"Type\": \"Number\"\n        },\n        \"ManagerDiskType\": {\n            \"AllowedValues\": [\n                \"standard\",\n                \"gp2\"\n            ],\n            \"Default\": \"standard\",\n            \"Description\": \"Manager ephemeral storage volume type\",\n            \"Type\": \"String\"\n        },\n        \"ManagerInstanceType\": {\n            \"AllowedValues\": [\n                \"t2.micro\",\n                \"t2.small\",\n                \"t2.medium\",\n                \"t2.large\",\n                \"t2.xlarge\",\n                \"t2.2xlarge\",\n                \"m4.large\",\n                \"m4.xlarge\",\n                \"m4.2xlarge\",\n                \"m4.4xlarge\",\n                \"m4.10xlarge\",\n                \"m4.16xlarge\",\n                \"m3.medium\",\n                \"m3.large\",\n                \"m3.xlarge\",\n                \"m3.2xlarge\",\n                \"c4.large\",\n                \"c4.xlarge\",\n                \"c4.2xlarge\",\n                \"c4.4xlarge\",\n                \"c4.8xlarge\",\n                \"c3.large\",\n                \"c3.xlarge\",\n                \"c3.2xlarge\",\n                \"c3.4xlarge\",\n                \"c3.8xlarge\",\n                \"r3.large\",\n                \"r3.xlarge\",\n                \"r3.2xlarge\",\n                \"r3.4xlarge\",\n                \"r3.8xlarge\",\n                \"r4.large\",\n                \"r4.xlarge\",\n                \"r4.2xlarge\",\n                \"r4.4xlarge\",\n                \"r4.8xlarge\",\n                \"r4.16xlarge\",\n                \"i3.large\",\n                \"i3.xlarge\",\n                \"i3.2xlarge\",\n                \"i3.4xlarge\",\n                \"i3.8xlarge\",\n                \"i3.16xlarge\"\n            ],\n            \"ConstraintDescription\": \"Must be a valid EC2 HVM instance type.\",\n            \"Default\": \"t2.micro\",\n            \"Description\": \"EC2 HVM instance type (t2.micro, m3.medium, etc).\",\n            \"Type\": \"String\"\n        },\n        \"ManagerSize\": {\n            \"AllowedValues\": [\n                \"1\",\n                \"3\",\n                \"5\"\n            ],\n            \"Default\": \"3\",\n            \"Description\": \"Number of Swarm manager nodes (1, 3, 5)\",\n            \"Type\": \"Number\"\n        },\n        \"WorkerDiskSize\": {\n            \"Default\": \"20\",\n            \"Description\": \"Size of Workers's ephemeral storage volume in GiB\",\n            \"MaxValue\": \"1024\",\n            \"MinValue\": \"20\",\n            \"Type\": \"Number\"\n        },\n        \"WorkerDiskType\": {\n            \"AllowedValues\": [\n                \"standard\",\n                \"gp2\"\n            ],\n            \"Default\": \"standard\",\n            \"Description\": \"Worker ephemeral storage volume type\",\n            \"Type\": \"String\"\n        }\n    },\n    \"Resources\": {\n        \"AZInfo\": {\n            \"Condition\": \"LambdaSupported\",\n            \"Properties\": {\n                \"Region\": {\n                    \"Ref\": \"AWS::Region\"\n                },\n                \"ServiceToken\": {\n                    \"Fn::GetAtt\": [\n                        \"AZInfoFunction\",\n                        \"Arn\"\n                    ]\n                }\n            },\n            \"Type\": \"Custom::AZInfo\"\n        },\n        \"AZInfoFunction\": {\n            \"Condition\": \"LambdaSupported\",\n            \"Properties\": {\n                \"Code\": {\n                    \"ZipFile\": {\n                        \"Fn::Join\": [\n                            \"\\n\",\n                            [\n                                \"import cfnresponse\",\n                                \"import boto3\",\n                                \"def handler(event, context):\",\n                                \"    ec2c = boto3.client('ec2')\",\n                                \"    r = ec2c.describe_availability_zones()\",\n                                \"    azs = r.get('AvailabilityZones')\",\n                                \"    az_list = [az.get('ZoneName') for az in azs if az.get('State') == 'available']\",\n                                \"    az0 = az_list[0]\",\n                                \"    az1 = az_list[1]\",\n                                \"    if len(az_list) \u003e 2:\",\n                                \"        az2 = az_list[2]\",\n                                \"    else:\",\n                                \"        az2 = az0\",\n                                \"    resp = {'AZ0': az0, 'AZ1': az1, 'AZ2': az2}\",\n                                \"    cfnresponse.send(event, context, cfnresponse.SUCCESS, resp)\",\n                                \"    return resp\"\n                            ]\n                        ]\n                    }\n                },\n                \"Handler\": \"index.handler\",\n                \"MemorySize\": 128,\n                \"Role\": {\n                    \"Fn::GetAtt\": [\n                        \"LambdaExecutionRole\",\n                        \"Arn\"\n                    ]\n                },\n                \"Runtime\": \"python2.7\",\n                \"Timeout\": \"10\"\n            },\n            \"Type\": \"AWS::Lambda::Function\"\n        },\n        \"AttachGateway\": {\n            \"DependsOn\": [\n                \"Vpc\",\n                \"InternetGateway\"\n            ],\n            \"Properties\": {\n                \"InternetGatewayId\": {\n                    \"Ref\": \"InternetGateway\"\n                },\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::VPCGatewayAttachment\"\n        },\n        \"CloudstorEBSPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"ec2:CreateTags\",\n                                \"ec2:AttachVolume\",\n                                \"ec2:DetachVolume\",\n                                \"ec2:CreateVolume\",\n                                \"ec2:DeleteVolume\",\n                                \"ec2:DescribeVolumes\",\n                                \"ec2:DescribeVolumeStatus\",\n                                \"ec2:CreateSnapshot\",\n                                \"ec2:DeleteSnapshot\",\n                                \"ec2:DescribeSnapshots\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"cloudstor-ebs-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"DockerLogGroup\": {\n            \"Condition\": \"CreateLogResources\",\n            \"Properties\": {\n                \"LogGroupName\": {\n                    \"Fn::Join\": [\n                        \"-\",\n                        [\n                            {\n                                \"Ref\": \"AWS::StackName\"\n                            },\n                            \"lg\"\n                        ]\n                    ]\n                },\n                \"RetentionInDays\": 7\n            },\n            \"Type\": \"AWS::Logs::LogGroup\"\n        },\n        \"DynDBPolicies\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"SwarmDynDBTable\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"dynamodb:PutItem\",\n                                \"dynamodb:DeleteItem\",\n                                \"dynamodb:GetItem\",\n                                \"dynamodb:UpdateItem\",\n                                \"dynamodb:Query\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::Join\": [\n                                    \"\",\n                                    [\n                                        \"arn:aws:dynamodb:\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \":\",\n                                        {\n                                            \"Ref\": \"AWS::AccountId\"\n                                        },\n                                        \":table/\",\n                                        {\n                                            \"Ref\": \"SwarmDynDBTable\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"dyndb-getput\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"DynDBWorkerPolicies\": {\n            \"DependsOn\": [\n                \"WorkerRole\",\n                \"SwarmDynDBTable\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"dynamodb:GetItem\",\n                                \"dynamodb:Query\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::Join\": [\n                                    \"\",\n                                    [\n                                        \"arn:aws:dynamodb:\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \":\",\n                                        {\n                                            \"Ref\": \"AWS::AccountId\"\n                                        },\n                                        \":table/\",\n                                        {\n                                            \"Ref\": \"SwarmDynDBTable\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"worker-dyndb-get\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"ExternalLoadBalancer\": {\n            \"DependsOn\": [\n                \"AttachGateway\",\n                \"ExternalLoadBalancerSG\",\n                \"PubSubnetAz1\",\n                \"PubSubnetAz2\",\n                \"PubSubnetAz3\"\n            ],\n            \"Properties\": {\n                \"ConnectionSettings\": {\n                    \"IdleTimeout\": 600\n                },\n                \"CrossZone\": \"true\",\n                \"HealthCheck\": {\n                    \"HealthyThreshold\": \"2\",\n                    \"Interval\": \"10\",\n                    \"Target\": \"HTTP:44554/\",\n                    \"Timeout\": \"8\",\n                    \"UnhealthyThreshold\": \"4\"\n                },\n                \"Listeners\": [\n                    {\n                        \"InstancePort\": \"7\",\n                        \"LoadBalancerPort\": \"7\",\n                        \"Protocol\": \"TCP\"\n                    }\n                ],\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"ExternalLoadBalancerSG\"\n                    }\n                ],\n                \"Subnets\": {\n                    \"Fn::If\": [\n                        \"HasOnly2AZs\",\n                        [\n                            {\n                                \"Ref\": \"PubSubnetAz1\"\n                            },\n                            {\n                                \"Ref\": \"PubSubnetAz2\"\n                            }\n                        ],\n                        [\n                            {\n                                \"Ref\": \"PubSubnetAz1\"\n                            },\n                            {\n                                \"Ref\": \"PubSubnetAz2\"\n                            },\n                            {\n                                \"Ref\": \"PubSubnetAz3\"\n                            }\n                        ]\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"ELB\"\n                                ]\n                            ]\n                        }\n                    }\n                ]\n            },\n            \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"\n        },\n        \"ExternalLoadBalancerSG\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"GroupDescription\": \"External Load Balancer SecurityGroup\",\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"-1\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"FileSystemGP\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"Properties\": {\n                \"FileSystemTags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"EFS-GP\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"PerformanceMode\": \"generalPurpose\"\n            },\n            \"Type\": \"AWS::EFS::FileSystem\"\n        },\n        \"FileSystemMaxIO\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"Properties\": {\n                \"FileSystemTags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"EFS-MaxIO\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"PerformanceMode\": \"maxIO\"\n            },\n            \"Type\": \"AWS::EFS::FileSystem\"\n        },\n        \"InternetGateway\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"IGW\"\n                                ]\n                            ]\n                        }\n                    }\n                ]\n            },\n            \"Type\": \"AWS::EC2::InternetGateway\"\n        },\n        \"LambdaExecutionRole\": {\n            \"Condition\": \"LambdaSupported\",\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sts:AssumeRole\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Principal\": {\n                                \"Service\": [\n                                    \"lambda.amazonaws.com\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"Path\": \"/\",\n                \"Policies\": [\n                    {\n                        \"PolicyDocument\": {\n                            \"Statement\": [\n                                {\n                                    \"Action\": [\n                                        \"logs:CreateLogGroup\",\n                                        \"logs:CreateLogStream\",\n                                        \"logs:PutLogEvents\"\n                                    ],\n                                    \"Effect\": \"Allow\",\n                                    \"Resource\": \"arn:aws:logs:*:*:*\"\n                                },\n                                {\n                                    \"Action\": [\n                                        \"ec2:DescribeAvailabilityZones\"\n                                    ],\n                                    \"Effect\": \"Allow\",\n                                    \"Resource\": \"*\"\n                                }\n                            ],\n                            \"Version\": \"2012-10-17\"\n                        },\n                        \"PolicyName\": \"root\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Role\"\n        },\n        \"ManagerAsg\": {\n            \"CreationPolicy\": {\n                \"ResourceSignal\": {\n                    \"Count\": {\n                        \"Ref\": \"ManagerSize\"\n                    },\n                    \"Timeout\": \"PT20M\"\n                }\n            },\n            \"DependsOn\": [\n                \"SwarmDynDBTable\",\n                \"PubSubnetAz1\",\n                \"PubSubnetAz2\",\n                \"PubSubnetAz3\",\n                \"ExternalLoadBalancer\"\n            ],\n            \"Properties\": {\n                \"DesiredCapacity\": {\n                    \"Ref\": \"ManagerSize\"\n                },\n                \"HealthCheckGracePeriod\": 300,\n                \"HealthCheckType\": \"ELB\",\n                \"LaunchConfigurationName\": {\n                    \"Ref\": \"ManagerLaunchConfig17090cerc2aws1\"\n                },\n                \"LoadBalancerNames\": [\n                    {\n                        \"Ref\": \"ExternalLoadBalancer\"\n                    }\n                ],\n                \"MaxSize\": 6,\n                \"MetricsCollection\": [\n                    {\n                        \"Granularity\": \"1Minute\"\n                    }\n                ],\n                \"MinSize\": 0,\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Manager\"\n                                ]\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"swarm-node-type\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": \"manager\"\n                    },\n                    {\n                        \"Key\": \"swarm-stack-id\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Ref\": \"AWS::StackId\"\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_FOR_AWS_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"forAws\"\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"docker\"\n                            ]\n                        }\n                    }\n                ],\n                \"VPCZoneIdentifier\": [\n                    {\n                        \"Fn::If\": [\n                            \"HasOnly2AZs\",\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        }\n                                    ]\n                                ]\n                            },\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz3\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"UpdatePolicy\": {\n                \"AutoScalingRollingUpdate\": {\n                    \"MaxBatchSize\": \"1\",\n                    \"MinInstancesInService\": {\n                        \"Ref\": \"ManagerSize\"\n                    },\n                    \"PauseTime\": \"PT20M\",\n                    \"WaitOnResourceSignals\": \"true\"\n                }\n            }\n        },\n        \"ManagerLaunchConfig17090cerc2aws1\": {\n            \"DependsOn\": \"ExternalLoadBalancer\",\n            \"Properties\": {\n                \"AssociatePublicIpAddress\": \"true\",\n                \"BlockDeviceMappings\": [\n                    {\n                        \"DeviceName\": \"/dev/xvdb\",\n                        \"Ebs\": {\n                            \"VolumeSize\": {\n                                \"Ref\": \"ManagerDiskSize\"\n                            },\n                            \"VolumeType\": {\n                                \"Ref\": \"ManagerDiskType\"\n                            }\n                        }\n                    }\n                ],\n                \"EbsOptimized\": {\n                    \"Fn::If\": [\n                        \"EBSOptimized\",\n                        \"true\",\n                        \"false\"\n                    ]\n                },\n                \"IamInstanceProfile\": {\n                    \"Ref\": \"ProxyInstanceProfile\"\n                },\n                \"ImageId\": {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegionArch2AMI\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        {\n                            \"Fn::FindInMap\": [\n                                \"AWSInstanceType2Arch\",\n                                {\n                                    \"Ref\": \"ManagerInstanceType\"\n                                },\n                                \"Arch\"\n                            ]\n                        }\n                    ]\n                },\n                \"InstanceType\": {\n                    \"Ref\": \"ManagerInstanceType\"\n                },\n                \"KeyName\": {\n                    \"Ref\": \"KeyName\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"ManagerVpcSG\"\n                    },\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"UserData\": {\n                    \"Fn::Base64\": {\n                        \"Fn::Join\": [\n                            \"\",\n                            [\n                                \"#!/bin/sh\\n\",\n                                \"export EXTERNAL_LB='\",\n                                {\n                                    \"Ref\": \"ExternalLoadBalancer\"\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_FOR_IAAS_VERSION='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"forAws\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export CHANNEL='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"channel\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EDITION_ADDON='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"addOn\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\\n\",\n                                \"export INSTANCE_TYPE=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-type)\\n\",\n                                \"export NODE_AZ=$(wget -qO- http://169.254.169.254/latest/meta-data/placement/availability-zone/)\\n\",\n                                \"export NODE_REGION=$(echo $NODE_AZ | sed 's/.$//')\\n\",\n                                \"export ENABLE_CLOUDWATCH_LOGS='\",\n                                {\n                                    \"Ref\": \"EnableCloudWatchLogs\"\n                                },\n                                \"'\\n\",\n                                \"export AWS_REGION='\",\n                                {\n                                    \"Ref\": \"AWS::Region\"\n                                },\n                                \"'\\n\",\n                                \"export MANAGER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"ManagerVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export WORKER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"NodeVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export DYNAMODB_TABLE='\",\n                                {\n                                    \"Ref\": \"SwarmDynDBTable\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_NAME='\",\n                                {\n                                    \"Ref\": \"AWS::StackName\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_ID='\",\n                                {\n                                    \"Ref\": \"AWS::StackId\"\n                                },\n                                \"'\\n\",\n                                \"export ACCOUNT_ID='\",\n                                {\n                                    \"Ref\": \"AWS::AccountId\"\n                                },\n                                \"'\\n\",\n                                \"export VPC_ID='\",\n                                {\n                                    \"Ref\": \"Vpc\"\n                                },\n                                \"'\\n\",\n                                \"export SWARM_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQS\"\n                                },\n                                \"'\\n\",\n                                \"export CLEANUP_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQSCleanup\"\n                                },\n                                \"'\\n\",\n                                \"export RUN_VACUUM='\",\n                                {\n                                    \"Ref\": \"EnableSystemPrune\"\n                                },\n                                \"'\\n\",\n                                \"export LOG_GROUP_NAME='\",\n                                {\n                                    \"Fn::Join\": [\n                                        \"-\",\n                                        [\n                                            {\n                                                \"Ref\": \"AWS::StackName\"\n                                            },\n                                            \"lg\"\n                                        ]\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export HAS_DDC='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"HasDDC\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export ENABLE_EFS='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        \"1\",\n                                        \"0\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_REGULAR='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemGP\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_MAXIO='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemMaxIO\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_EXPERIMENTAL='true' \\n\",\n                                \"export NODE_TYPE='manager'\\n\",\n                                \"export INSTANCE_NAME='ManagerAsg'\\n\",\n                                \"\\n\",\n                                \"mkdir -p /var/lib/docker/editions\\n\",\n                                \"echo \\\"$EXTERNAL_LB\\\" \u003e /var/lib/docker/editions/lb_name\\n\",\n                                \"echo \\\"# hostname : ELB_name\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"127.0.0.1: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"localhost: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"default: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"\\n\",\n                                \"echo '{\\\"experimental\\\": '$DOCKER_EXPERIMENTAL', \\\"labels\\\":[\\\"os=linux\\\", \\\"region='$NODE_REGION'\\\", \\\"availability_zone='$NODE_AZ'\\\", \\\"instance_type='$INSTANCE_TYPE'\\\", \\\"node_type='$NODE_TYPE'\\\" ]' \u003e /etc/docker/daemon.json\\n\",\n                                \"\\n\",\n                                \"if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then\\n\",\n                                \"   echo ', \\\"log-driver\\\": \\\"awslogs\\\", \\\"log-opts\\\": {\\\"awslogs-group\\\": \\\"'$LOG_GROUP_NAME'\\\", \\\"tag\\\": \\\"{{.Name}}-{{.ID}}\\\" }}' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"else\\n\",\n                                \"   echo ' }' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"fi\\n\",\n                                \"\\n\",\n                                \"chown -R docker /home/docker/\\n\",\n                                \"chgrp -R docker /home/docker/\\n\",\n                                \"rc-service docker restart\\n\",\n                                \"sleep 5\\n\",\n                                \"\\n\",\n                                \"# init-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --restart=no -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e INSTANCE_NAME=$INSTANCE_NAME -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -v /var/run/docker.sock:/var/run/docker.sock -v /var/log:/var/log docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# guide-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --log-opt max-size=50m --name=guide-aws --restart=always -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e INSTANCE_NAME=$INSTANCE_NAME -e VPC_ID=$VPC_ID -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e SWARM_QUEUE=\\\"$SWARM_QUEUE\\\" -e CLEANUP_QUEUE=\\\"$CLEANUP_QUEUE\\\" -e RUN_VACUUM=$RUN_VACUUM -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -e CHANNEL=$CHANNEL -v /var/run/docker.sock:/var/run/docker.sock docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# cloudstor\\n\",\n                                \"docker plugin install --alias cloudstor:aws --grant-all-permissions docker4x/cloudstor:$DOCKER_FOR_IAAS_VERSION CLOUD_PLATFORM=AWS EFS_ID_REGULAR=$EFS_ID_REGULAR EFS_ID_MAXIO=$EFS_ID_MAXIO AWS_REGION=$AWS_REGION AWS_STACK_ID=$STACK_ID EFS_SUPPORTED=$ENABLE_EFS DEBUG=1\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file  --log-opt max-size=50m --name=meta-aws --restart=always -d -p $LOCAL_IP:9024:8080 -e AWS_REGION=$AWS_REGION -e MANAGER_SECURITY_GROUP_ID=$MANAGER_SECURITY_GROUP_ID -e WORKER_SECURITY_GROUP_ID=$WORKER_SECURITY_GROUP_ID -v /var/run/docker.sock:/var/run/docker.sock docker4x/meta-aws:$DOCKER_FOR_IAAS_VERSION metaserver -iaas_provider=aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file  --log-opt max-size=50m --name=l4controller-aws --restart=always -d -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/editions:/var/lib/docker/editions docker4x/l4controller-aws:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\\n\"\n                            ]\n                        ]\n                    }\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"\n        },\n        \"ManagerVpcSG\": {\n            \"DependsOn\": \"NodeVpcSG\",\n            \"Properties\": {\n                \"GroupDescription\": \"Manager SecurityGroup\",\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"22\",\n                        \"IpProtocol\": \"tcp\",\n                        \"ToPort\": \"22\"\n                    },\n                    {\n                        \"IpProtocol\": \"50\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        }\n                    },\n                    {\n                        \"FromPort\": \"2377\",\n                        \"IpProtocol\": \"tcp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"2377\"\n                    },\n                    {\n                        \"FromPort\": \"4789\",\n                        \"IpProtocol\": \"udp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"4789\"\n                    },\n                    {\n                        \"FromPort\": \"7946\",\n                        \"IpProtocol\": \"tcp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"7946\"\n                    },\n                    {\n                        \"FromPort\": \"7946\",\n                        \"IpProtocol\": \"udp\",\n                        \"SourceSecurityGroupId\": {\n                            \"Fn::GetAtt\": [\n                                \"NodeVpcSG\",\n                                \"GroupId\"\n                            ]\n                        },\n                        \"ToPort\": \"7946\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"MountTargetGP1\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemGP\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemGP\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz1\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetGP2\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemGP\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemGP\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz2\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetGP3\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemGP\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemGP\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz3\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetMaxIO1\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemMaxIO\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemMaxIO\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz1\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetMaxIO2\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemMaxIO\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemMaxIO\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz2\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"MountTargetMaxIO3\": {\n            \"Condition\": \"InstallCloudStorEFSPreReqs\",\n            \"DependsOn\": [\n                \"FileSystemMaxIO\",\n                \"SwarmWideSG\"\n            ],\n            \"Properties\": {\n                \"FileSystemId\": {\n                    \"Ref\": \"FileSystemMaxIO\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"SwarmWideSG\"\n                    }\n                ],\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz3\"\n                }\n            },\n            \"Type\": \"AWS::EFS::MountTarget\"\n        },\n        \"NodeAsg\": {\n            \"CreationPolicy\": {\n                \"ResourceSignal\": {\n                    \"Count\": {\n                        \"Ref\": \"ClusterSize\"\n                    },\n                    \"Timeout\": \"PT20M\"\n                }\n            },\n            \"DependsOn\": \"ManagerAsg\",\n            \"Properties\": {\n                \"DesiredCapacity\": {\n                    \"Ref\": \"ClusterSize\"\n                },\n                \"HealthCheckGracePeriod\": 300,\n                \"HealthCheckType\": \"ELB\",\n                \"LaunchConfigurationName\": {\n                    \"Ref\": \"NodeLaunchConfig17090cerc2aws1\"\n                },\n                \"LoadBalancerNames\": [\n                    {\n                        \"Ref\": \"ExternalLoadBalancer\"\n                    }\n                ],\n                \"MaxSize\": 1000,\n                \"MetricsCollection\": [\n                    {\n                        \"Granularity\": \"1Minute\"\n                    }\n                ],\n                \"MinSize\": 0,\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"worker\"\n                                ]\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"swarm-node-type\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": \"worker\"\n                    },\n                    {\n                        \"Key\": \"swarm-stack-id\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Ref\": \"AWS::StackId\"\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_FOR_AWS_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"forAws\"\n                            ]\n                        }\n                    },\n                    {\n                        \"Key\": \"DOCKER_VERSION\",\n                        \"PropagateAtLaunch\": true,\n                        \"Value\": {\n                            \"Fn::FindInMap\": [\n                                \"DockerForAWS\",\n                                \"version\",\n                                \"docker\"\n                            ]\n                        }\n                    }\n                ],\n                \"VPCZoneIdentifier\": [\n                    {\n                        \"Fn::If\": [\n                            \"HasOnly2AZs\",\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        }\n                                    ]\n                                ]\n                            },\n                            {\n                                \"Fn::Join\": [\n                                    \",\",\n                                    [\n                                        {\n                                            \"Ref\": \"PubSubnetAz1\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz2\"\n                                        },\n                                        {\n                                            \"Ref\": \"PubSubnetAz3\"\n                                        }\n                                    ]\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"UpdatePolicy\": {\n                \"AutoScalingRollingUpdate\": {\n                    \"MaxBatchSize\": \"1\",\n                    \"MinInstancesInService\": {\n                        \"Ref\": \"ClusterSize\"\n                    },\n                    \"PauseTime\": \"PT20M\",\n                    \"WaitOnResourceSignals\": \"true\"\n                }\n            }\n        },\n        \"NodeLaunchConfig17090cerc2aws1\": {\n            \"DependsOn\": \"ManagerAsg\",\n            \"Properties\": {\n                \"AssociatePublicIpAddress\": \"true\",\n                \"BlockDeviceMappings\": [\n                    {\n                        \"DeviceName\": \"/dev/xvdb\",\n                        \"Ebs\": {\n                            \"VolumeSize\": {\n                                \"Ref\": \"WorkerDiskSize\"\n                            },\n                            \"VolumeType\": {\n                                \"Ref\": \"WorkerDiskType\"\n                            }\n                        }\n                    }\n                ],\n                \"EbsOptimized\": {\n                    \"Fn::If\": [\n                        \"EBSOptimized\",\n                        \"true\",\n                        \"false\"\n                    ]\n                },\n                \"IamInstanceProfile\": {\n                    \"Ref\": \"WorkerInstanceProfile\"\n                },\n                \"ImageId\": {\n                    \"Fn::FindInMap\": [\n                        \"AWSRegionArch2AMI\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        {\n                            \"Fn::FindInMap\": [\n                                \"AWSInstanceType2Arch\",\n                                {\n                                    \"Ref\": \"InstanceType\"\n                                },\n                                \"Arch\"\n                            ]\n                        }\n                    ]\n                },\n                \"InstanceType\": {\n                    \"Ref\": \"InstanceType\"\n                },\n                \"KeyName\": {\n                    \"Ref\": \"KeyName\"\n                },\n                \"SecurityGroups\": [\n                    {\n                        \"Ref\": \"NodeVpcSG\"\n                    }\n                ],\n                \"UserData\": {\n                    \"Fn::Base64\": {\n                        \"Fn::Join\": [\n                            \"\",\n                            [\n                                \"#!/bin/sh\\n\",\n                                \"export EXTERNAL_LB='\",\n                                {\n                                    \"Ref\": \"ExternalLoadBalancer\"\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_FOR_IAAS_VERSION='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"forAws\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export CHANNEL='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"channel\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EDITION_ADDON='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"addOn\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\\n\",\n                                \"export INSTANCE_TYPE=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-type)\\n\",\n                                \"export NODE_AZ=$(wget -qO- http://169.254.169.254/latest/meta-data/placement/availability-zone/)\\n\",\n                                \"export NODE_REGION=$(echo $NODE_AZ | sed 's/.$//')\\n\",\n                                \"export ENABLE_CLOUDWATCH_LOGS='\",\n                                {\n                                    \"Ref\": \"EnableCloudWatchLogs\"\n                                },\n                                \"'\\n\",\n                                \"export AWS_REGION='\",\n                                {\n                                    \"Ref\": \"AWS::Region\"\n                                },\n                                \"'\\n\",\n                                \"export MANAGER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"ManagerVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export WORKER_SECURITY_GROUP_ID='\",\n                                {\n                                    \"Ref\": \"NodeVpcSG\"\n                                },\n                                \"'\\n\",\n                                \"export DYNAMODB_TABLE='\",\n                                {\n                                    \"Ref\": \"SwarmDynDBTable\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_NAME='\",\n                                {\n                                    \"Ref\": \"AWS::StackName\"\n                                },\n                                \"'\\n\",\n                                \"export STACK_ID='\",\n                                {\n                                    \"Ref\": \"AWS::StackId\"\n                                },\n                                \"'\\n\",\n                                \"export ACCOUNT_ID='\",\n                                {\n                                    \"Ref\": \"AWS::AccountId\"\n                                },\n                                \"'\\n\",\n                                \"export VPC_ID='\",\n                                {\n                                    \"Ref\": \"Vpc\"\n                                },\n                                \"'\\n\",\n                                \"export SWARM_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQS\"\n                                },\n                                \"'\\n\",\n                                \"export CLEANUP_QUEUE='\",\n                                {\n                                    \"Ref\": \"SwarmSQSCleanup\"\n                                },\n                                \"'\\n\",\n                                \"export RUN_VACUUM='\",\n                                {\n                                    \"Ref\": \"EnableSystemPrune\"\n                                },\n                                \"'\\n\",\n                                \"export LOG_GROUP_NAME='\",\n                                {\n                                    \"Fn::Join\": [\n                                        \"-\",\n                                        [\n                                            {\n                                                \"Ref\": \"AWS::StackName\"\n                                            },\n                                            \"lg\"\n                                        ]\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export HAS_DDC='\",\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"DockerForAWS\",\n                                        \"version\",\n                                        \"HasDDC\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export ENABLE_EFS='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        \"1\",\n                                        \"0\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_REGULAR='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemGP\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export EFS_ID_MAXIO='\",\n                                {\n                                    \"Fn::If\": [\n                                        \"InstallCloudStorEFSPreReqs\",\n                                        {\n                                            \"Ref\": \"FileSystemMaxIO\"\n                                        },\n                                        \"\"\n                                    ]\n                                },\n                                \"'\\n\",\n                                \"export DOCKER_EXPERIMENTAL='true' \\n\",\n                                \"export NODE_TYPE='worker'\\n\",\n                                \"export INSTANCE_NAME='NodeAsg'\\n\",\n                                \"\\n\",\n                                \"mkdir -p /var/lib/docker/editions\\n\",\n                                \"echo \\\"$EXTERNAL_LB\\\" \u003e /var/lib/docker/editions/lb_name\\n\",\n                                \"echo \\\"# hostname : ELB_name\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"127.0.0.1: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"localhost: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"echo \\\"default: $EXTERNAL_LB\\\" \u003e\u003e /var/lib/docker/editions/elb.config\\n\",\n                                \"\\n\",\n                                \"echo '{\\\"experimental\\\": '$DOCKER_EXPERIMENTAL', \\\"labels\\\":[\\\"os=linux\\\", \\\"region='$NODE_REGION'\\\", \\\"availability_zone='$NODE_AZ'\\\", \\\"instance_type='$INSTANCE_TYPE'\\\", \\\"node_type='$NODE_TYPE'\\\" ]' \u003e /etc/docker/daemon.json\\n\",\n                                \"\\n\",\n                                \"if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then\\n\",\n                                \"   echo ', \\\"log-driver\\\": \\\"awslogs\\\", \\\"log-opts\\\": {\\\"awslogs-group\\\": \\\"'$LOG_GROUP_NAME'\\\", \\\"tag\\\": \\\"{{.Name}}-{{.ID}}\\\" }}' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"else\\n\",\n                                \"   echo ' }' \u003e\u003e /etc/docker/daemon.json\\n\",\n                                \"fi\\n\",\n                                \"\\n\",\n                                \"chown -R docker /home/docker/\\n\",\n                                \"chgrp -R docker /home/docker/\\n\",\n                                \"rc-service docker restart\\n\",\n                                \"sleep 5\\n\",\n                                \"\\n\",\n                                \"# init-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --restart=no -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e INSTANCE_NAME=$INSTANCE_NAME -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -v /var/run/docker.sock:/var/run/docker.sock -v /var/log:/var/log docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# guide-aws\\n\",\n                                \"docker run --label com.docker.editions.system --log-driver=json-file --log-opt max-size=50m --name=guide-aws --restart=always -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e NODE_TYPE=$NODE_TYPE -e REGION=$AWS_REGION -e STACK_NAME=$STACK_NAME -e INSTANCE_NAME=$INSTANCE_NAME -e VPC_ID=$VPC_ID -e STACK_ID=\\\"$STACK_ID\\\" -e ACCOUNT_ID=$ACCOUNT_ID -e SWARM_QUEUE=\\\"$SWARM_QUEUE\\\" -e CLEANUP_QUEUE=\\\"$CLEANUP_QUEUE\\\" -e RUN_VACUUM=$RUN_VACUUM -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -e EDITION_ADDON=$EDITION_ADDON -e HAS_DDC=$HAS_DDC -e CHANNEL=$CHANNEL -v /var/run/docker.sock:/var/run/docker.sock docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\\n\",\n                                \"\\n\",\n                                \"# cloudstor\\n\",\n                                \"docker plugin install --alias cloudstor:aws --grant-all-permissions docker4x/cloudstor:$DOCKER_FOR_IAAS_VERSION CLOUD_PLATFORM=AWS EFS_ID_REGULAR=$EFS_ID_REGULAR EFS_ID_MAXIO=$EFS_ID_MAXIO AWS_REGION=$AWS_REGION AWS_STACK_ID=$STACK_ID EFS_SUPPORTED=$ENABLE_EFS DEBUG=1\\n\",\n                                \"# Worker user data\\n\"\n                            ]\n                        ]\n                    }\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"\n        },\n        \"NodeVpcSG\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"GroupDescription\": \"Node SecurityGroup\",\n                \"SecurityGroupEgress\": [\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"8\",\n                        \"IpProtocol\": \"icmp\",\n                        \"ToPort\": \"0\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"IpProtocol\": \"50\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"udp\",\n                        \"ToPort\": \"65535\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"tcp\",\n                        \"ToPort\": \"2374\"\n                    },\n                    {\n                        \"CidrIp\": \"0.0.0.0/0\",\n                        \"FromPort\": \"2376\",\n                        \"IpProtocol\": \"tcp\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": {\n                            \"Fn::FindInMap\": [\n                                \"VpcCidrs\",\n                                \"vpc\",\n                                \"cidr\"\n                            ]\n                        },\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"-1\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"ProxyInstanceProfile\": {\n            \"DependsOn\": \"ProxyRole\",\n            \"Properties\": {\n                \"Path\": \"/\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::InstanceProfile\"\n        },\n        \"ProxyPolicies\": {\n            \"DependsOn\": \"ProxyRole\",\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"elasticloadbalancing:DeregisterInstancesFromLoadBalancer\",\n                                \"elasticloadbalancing:CreateLoadBalancerListeners\",\n                                \"elasticloadbalancing:DeleteLoadBalancerListeners\",\n                                \"elasticloadbalancing:ConfigureHealthCheck\",\n                                \"elasticloadbalancing:DescribeTags\",\n                                \"elasticloadbalancing:SetLoadBalancerListenerSSLCertificate\",\n                                \"elasticloadbalancing:DescribeSSLPolicies\",\n                                \"elasticloadbalancing:DescribeLoadBalancers\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"elb-update\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"ProxyRole\": {\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sts:AssumeRole\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Principal\": {\n                                \"Service\": [\n                                    \"ec2.amazonaws.com\",\n                                    \"autoscaling.amazonaws.com\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"Path\": \"/\"\n            },\n            \"Type\": \"AWS::IAM::Role\"\n        },\n        \"PubSubnet1RouteTableAssociation\": {\n            \"DependsOn\": [\n                \"PubSubnetAz1\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                },\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz1\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n        },\n        \"PubSubnet2RouteTableAssociation\": {\n            \"DependsOn\": [\n                \"PubSubnetAz2\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                },\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz2\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n        },\n        \"PubSubnet3RouteTableAssociation\": {\n            \"DependsOn\": [\n                \"PubSubnetAz3\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                },\n                \"SubnetId\": {\n                    \"Ref\": \"PubSubnetAz3\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n        },\n        \"PubSubnetAz1\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\n                    \"Fn::If\": [\n                        \"LambdaSupported\",\n                        {\n                            \"Fn::GetAtt\": [\n                                \"AZInfo\",\n                                \"AZ0\"\n                            ]\n                        },\n                        {\n                            \"Fn::Select\": [\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"AWSRegion2AZ\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \"AZ0\"\n                                    ]\n                                },\n                                {\n                                    \"Fn::GetAZs\": {\n                                        \"Ref\": \"AWS::Region\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"pubsubnet1\",\n                        \"cidr\"\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Subnet1\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Subnet\"\n        },\n        \"PubSubnetAz2\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\n                    \"Fn::If\": [\n                        \"LambdaSupported\",\n                        {\n                            \"Fn::GetAtt\": [\n                                \"AZInfo\",\n                                \"AZ1\"\n                            ]\n                        },\n                        {\n                            \"Fn::Select\": [\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"AWSRegion2AZ\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \"AZ1\"\n                                    ]\n                                },\n                                {\n                                    \"Fn::GetAZs\": {\n                                        \"Ref\": \"AWS::Region\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"pubsubnet2\",\n                        \"cidr\"\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Subnet2\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Subnet\"\n        },\n        \"PubSubnetAz3\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\n                    \"Fn::If\": [\n                        \"LambdaSupported\",\n                        {\n                            \"Fn::GetAtt\": [\n                                \"AZInfo\",\n                                \"AZ2\"\n                            ]\n                        },\n                        {\n                            \"Fn::Select\": [\n                                {\n                                    \"Fn::FindInMap\": [\n                                        \"AWSRegion2AZ\",\n                                        {\n                                            \"Ref\": \"AWS::Region\"\n                                        },\n                                        \"AZ2\"\n                                    ]\n                                },\n                                {\n                                    \"Fn::GetAZs\": {\n                                        \"Ref\": \"AWS::Region\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"pubsubnet3\",\n                        \"cidr\"\n                    ]\n                },\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"Subnet3\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Subnet\"\n        },\n        \"PublicRouteViaIgw\": {\n            \"DependsOn\": [\n                \"AttachGateway\",\n                \"RouteViaIgw\"\n            ],\n            \"Properties\": {\n                \"DestinationCidrBlock\": \"0.0.0.0/0\",\n                \"GatewayId\": {\n                    \"Ref\": \"InternetGateway\"\n                },\n                \"RouteTableId\": {\n                    \"Ref\": \"RouteViaIgw\"\n                }\n            },\n            \"Type\": \"AWS::EC2::Route\"\n        },\n        \"RouteViaIgw\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"RT\"\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::RouteTable\"\n        },\n        \"SwarmAPIPolicy\": {\n            \"DependsOn\": \"ProxyRole\",\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"ec2:DescribeInstances\",\n                                \"ec2:DescribeVpcAttribute\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmAutoscalePolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"autoscaling:RecordLifecycleActionHeartbeat\",\n                                \"autoscaling:CompleteLifecycleAction\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-autoscale-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmDynDBTable\": {\n            \"DependsOn\": \"ExternalLoadBalancer\",\n            \"Properties\": {\n                \"AttributeDefinitions\": [\n                    {\n                        \"AttributeName\": \"node_type\",\n                        \"AttributeType\": \"S\"\n                    }\n                ],\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"node_type\",\n                        \"KeyType\": \"HASH\"\n                    }\n                ],\n                \"ProvisionedThroughput\": {\n                    \"ReadCapacityUnits\": 1,\n                    \"WriteCapacityUnits\": 1\n                },\n                \"TableName\": {\n                    \"Fn::Join\": [\n                        \"-\",\n                        [\n                            {\n                                \"Ref\": \"AWS::StackName\"\n                            },\n                            \"dyndbtable\"\n                        ]\n                    ]\n                }\n            },\n            \"Type\": \"AWS::DynamoDB::Table\"\n        },\n        \"SwarmLogPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"logs:CreateLogStream\",\n                                \"logs:PutLogEvents\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": \"*\"\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-log-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmManagerUpgradeHook\": {\n            \"DependsOn\": \"SwarmSQS\",\n            \"Properties\": {\n                \"AutoScalingGroupName\": {\n                    \"Ref\": \"ManagerAsg\"\n                },\n                \"HeartbeatTimeout\": \"600\",\n                \"LifecycleTransition\": \"autoscaling:EC2_INSTANCE_TERMINATING\",\n                \"NotificationTargetARN\": {\n                    \"Fn::GetAtt\": [\n                        \"SwarmSQS\",\n                        \"Arn\"\n                    ]\n                },\n                \"RoleARN\": {\n                    \"Fn::GetAtt\": [\n                        \"ProxyRole\",\n                        \"Arn\"\n                    ]\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LifecycleHook\"\n        },\n        \"SwarmSQS\": {\n            \"Properties\": {\n                \"MessageRetentionPeriod\": 43200,\n                \"ReceiveMessageWaitTimeSeconds\": 10\n            },\n            \"Type\": \"AWS::SQS::Queue\"\n        },\n        \"SwarmSQSCleanup\": {\n            \"Properties\": {\n                \"MessageRetentionPeriod\": 43200,\n                \"ReceiveMessageWaitTimeSeconds\": 10\n            },\n            \"Type\": \"AWS::SQS::Queue\"\n        },\n        \"SwarmSQSCleanupPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\",\n                \"SwarmSQSCleanup\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sqs:DeleteMessage\",\n                                \"sqs:ReceiveMessage\",\n                                \"sqs:SendMessage\",\n                                \"sqs:GetQueueAttributes\",\n                                \"sqs:GetQueueUrl\",\n                                \"sqs:ListQueues\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::GetAtt\": [\n                                    \"SwarmSQSCleanup\",\n                                    \"Arn\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-sqs-cleanup-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmSQSPolicy\": {\n            \"DependsOn\": [\n                \"ProxyRole\",\n                \"WorkerRole\",\n                \"SwarmSQS\"\n            ],\n            \"Properties\": {\n                \"PolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sqs:DeleteMessage\",\n                                \"sqs:ReceiveMessage\",\n                                \"sqs:SendMessage\",\n                                \"sqs:GetQueueAttributes\",\n                                \"sqs:GetQueueUrl\",\n                                \"sqs:ListQueues\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Resource\": {\n                                \"Fn::GetAtt\": [\n                                    \"SwarmSQS\",\n                                    \"Arn\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"PolicyName\": \"swarm-sqs-policy\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"ProxyRole\"\n                    },\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::Policy\"\n        },\n        \"SwarmWideSG\": {\n            \"DependsOn\": \"Vpc\",\n            \"Properties\": {\n                \"GroupDescription\": \"Swarm wide access\",\n                \"SecurityGroupIngress\": [\n                    {\n                        \"CidrIp\": {\n                            \"Fn::FindInMap\": [\n                                \"VpcCidrs\",\n                                \"vpc\",\n                                \"cidr\"\n                            ]\n                        },\n                        \"FromPort\": \"0\",\n                        \"IpProtocol\": \"-1\",\n                        \"ToPort\": \"65535\"\n                    }\n                ],\n                \"VpcId\": {\n                    \"Ref\": \"Vpc\"\n                }\n            },\n            \"Type\": \"AWS::EC2::SecurityGroup\"\n        },\n        \"SwarmWorkerUpgradeHook\": {\n            \"DependsOn\": \"SwarmSQS\",\n            \"Properties\": {\n                \"AutoScalingGroupName\": {\n                    \"Ref\": \"NodeAsg\"\n                },\n                \"HeartbeatTimeout\": \"600\",\n                \"LifecycleTransition\": \"autoscaling:EC2_INSTANCE_TERMINATING\",\n                \"NotificationTargetARN\": {\n                    \"Fn::GetAtt\": [\n                        \"SwarmSQS\",\n                        \"Arn\"\n                    ]\n                },\n                \"RoleARN\": {\n                    \"Fn::GetAtt\": [\n                        \"WorkerRole\",\n                        \"Arn\"\n                    ]\n                }\n            },\n            \"Type\": \"AWS::AutoScaling::LifecycleHook\"\n        },\n        \"Vpc\": {\n            \"Properties\": {\n                \"CidrBlock\": {\n                    \"Fn::FindInMap\": [\n                        \"VpcCidrs\",\n                        \"vpc\",\n                        \"cidr\"\n                    ]\n                },\n                \"EnableDnsHostnames\": \"true\",\n                \"EnableDnsSupport\": \"true\",\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": {\n                            \"Fn::Join\": [\n                                \"-\",\n                                [\n                                    {\n                                        \"Ref\": \"AWS::StackName\"\n                                    },\n                                    \"VPC\"\n                                ]\n                            ]\n                        }\n                    }\n                ]\n            },\n            \"Type\": \"AWS::EC2::VPC\"\n        },\n        \"WorkerInstanceProfile\": {\n            \"DependsOn\": \"WorkerRole\",\n            \"Properties\": {\n                \"Path\": \"/\",\n                \"Roles\": [\n                    {\n                        \"Ref\": \"WorkerRole\"\n                    }\n                ]\n            },\n            \"Type\": \"AWS::IAM::InstanceProfile\"\n        },\n        \"WorkerRole\": {\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Statement\": [\n                        {\n                            \"Action\": [\n                                \"sts:AssumeRole\"\n                            ],\n                            \"Effect\": \"Allow\",\n                            \"Principal\": {\n                                \"Service\": [\n                                    \"ec2.amazonaws.com\",\n                                    \"autoscaling.amazonaws.com\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"Version\": \"2012-10-17\"\n                },\n                \"Path\": \"/\"\n            },\n            \"Type\": \"AWS::IAM::Role\"\n        }\n    }\n}"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }
            },
            "depends_on": []
        }
    ]
}
